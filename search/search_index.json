{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learning Programming Languages","text":"<p>Conjunto de informa\u00e7\u00f5es b\u00e1sicas sobre diversas linguagens de programa\u00e7\u00e3o.  </p> <p>Id\u00e9ia parecida com Learn X in Y minutes.  </p>"},{"location":"#notes","title":"Notes","text":"<p>Caso n\u00e3o esteja citando o sistema operacional, assuma que \u00e9 Ubuntu. Caso n\u00e3o esteja citando o shell, assuma que \u00e9 bash. Certas palavras podem vir em ingl\u00eas por serem mais familiares para mim.  </p>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Note</p> <p>Usado para falar de curiosidades. Exemplo:  </p> <p>Bin\u00e1rio ir\u00e1 se encontrar na pasta <code>~/.local/bin</code>.  </p> <p>Abstract</p> <p>Usado no in\u00edcio da p\u00e1gina para avisar da qualidade do conte\u00fado dela. Exemplo:  </p> <p>Adapta\u00e7\u00e3o da linguagem para este assunto.  </p> <p>Obs: Sempre encolhido (e com t\u00edtulo) pois se repete muito.  </p> <p>Info</p> <p>Usado para ensinar outro conceito. Exemplo:  </p> <p>Endianness se trata da ordem em que os bytes s\u00e3o ordenados (na m\u00e1quina ou durante uma transmiss\u00e3o).  </p> <p>Obs: Sempre encolhido (e com t\u00edtulo) pois \u00e9 conhecimento opcional.  </p> <p>Tip</p> <p>Usado para contar algo que pode ajudar se for feito. Exemplo:  </p> <p>Version managers ajudam caso v\u00e1 trabalhar em diversos projetos em vers\u00f5es de linguagens diferentes.  </p> <p>Warning</p> <p>Usado para avisar de algo inesperado que pode ocorrer. Exemplo:  </p> <p>Unions podem causar diversos problemas se n\u00e3o tomar cuidado.  </p> <p>Danger</p> <p>Usado para avisar de algo perigoso que pode ocorrer. Exemplo:  </p> <p>M\u00e1quina pode parar de funcionar se instalar desta maneira.  </p> <p>Example</p> <p>Usado para demonstrar um exemplo dentro de uma admonitions. Exemplo:  </p> <p>Podemos simular classes desta maneira:  </p> <pre><code>// Example...\n</code></pre> <p>Obs: Sempre encolhido (e com t\u00edtulo) pois \u00e9 leitura opcional.  </p>"},{"location":"data_types/","title":"Index","text":""},{"location":"data_types/#bool","title":"Bool","text":"<p>(Boolean)</p> <p>Representa\u00e7\u00e3o de verdadeiro e falso, por\u00e9m por n\u00e3o ser poss\u00edvel armazenar 1 bit sozinho, ele ocupa sempre o espa\u00e7o m\u00ednimo de 1 byte.  </p>"},{"location":"data_types/#int","title":"Int","text":"<p>(Integer)</p> <p>Representa\u00e7\u00e3o de um n\u00famero inteiro, quantidade de n\u00fameros que \u00e9 poss\u00edvel representar depende da quantidade de bytes utilizados.  </p>"},{"location":"data_types/#float","title":"Float","text":"<p>(Floating Point)</p> <p>Representa\u00e7\u00e3o de um n\u00famero racional, quantidade de n\u00fameros que \u00e9 poss\u00edvel representar depende da quantidade de bytes utilizados.  </p>"},{"location":"data_types/#char","title":"Char","text":"<p>(Character)</p> <p>A id\u00e9ia de um caracter \u00e9 representar um grafema (unidade m\u00ednima de um sistema de escrita). O que n\u00e3o \u00e9 f\u00e1cil quando lidando com diversos idiomas.  </p> <p>Atualmente UTF-8 \u00e9 encode mais recomendado por conseguir representar um grafema de diversas linguagens, ele pode ocupar de 1 at\u00e9 4 bytes dependendo de qual lingua o caracter pertencer.  </p> <p>Recomenda\u00e7\u00e3o de video: https://www.youtube.com/watch?v=ut74oHojxqo </p> Size of a byte <p>Atualmente \u00e9 muito comum assumir que um char \u00e9 1 byte (8 bits) pois foi o padr\u00e3o adotado por um longo periodo de tempo (ASCII).  </p> <p>Mas durante o tempo de vida dos computadores, 8 bits n\u00e3o foi sempre a medida m\u00ednima de mem\u00f3ria, j\u00e1 tivemos diversos tamanhos e eles tamb\u00e9m eram usados para representar caracteres.  </p> <p>Tivemos 6 bits, 5 bits, 4 bits... At\u00e9 o famoso padr\u00e3o de encode ASCII come\u00e7ou como 7 bits e foi adaptado para 8 bits.  </p>"},{"location":"data_types/#enum","title":"Enum","text":"<p>(Enumerated)</p> <p>Maneira de dar nomes a valores constantes para facilitar a escrita e entendimento do c\u00f3digo. Durante a compila\u00e7\u00e3o estes nomes s\u00e3o convertidos para os devidos valores.  </p> <pre><code>enum {\n    name1\n    name2\n    name3\n}\n</code></pre>"},{"location":"data_types/#array","title":"Array","text":"<p>Cole\u00e7\u00e3o de dados que possuem o mesmo tipo e s\u00e3o armazenados sequ\u00eancialmente na mem\u00f3ria.  </p> <p>\u00c9 poss\u00edvel caminhar pelos valores do array dando um \"passo\" na mem\u00f3ria. O tamanho do passo \u00e9 relativo ao tipo do dado armazenado, ou seja, um array de inteiros de 4 bytes far\u00e1 com que o passo passe 4 endere\u00e7os de mem\u00f3ria.  </p> <p>N\u00e3o \u00e9 poss\u00edvel alterar o tamanho de um array pois n\u00e3o existe garantia que o espa\u00e7o seguinte da mem\u00f3ria est\u00e1 livre para ser adicionado ao array. A solu\u00e7\u00e3o \u00e9 requisitar um novo espa\u00e7o de mem\u00f3ria com espa\u00e7o suficiente e copiar os valores.  </p> <pre><code>array {\n    value1\n    value2\n    value3\n}\n</code></pre>"},{"location":"data_types/#union","title":"Union","text":"<p>Permite utilizar um espa\u00e7o de mem\u00f3ria para armazenar um entre v\u00e1rios tipos de dados.  </p> <p>O tamanho do espa\u00e7o de mem\u00f3ria ter\u00e1 que ser o maior dentro dos tipos.  </p> <pre><code>union {\n    type1\n    type2\n    type3\n}\n</code></pre> <p>Warning</p> <p>\u00c9 importante notar que \u00e9 perigoso n\u00e3o saber o tipo da vari\u00e1vel naquele exato momento, pois tipos diferentes de vari\u00e1veis possuem organiza\u00e7\u00e3o diferente na mem\u00f3ria e operam de maneira diferente no processador.  </p> <p>Por exemplo, nenhuma das opera\u00e7\u00f5es abaixo ir\u00e1 funcionar pois armazenamos na mem\u00f3ria o valor 10 da maneira esperada por <code>int</code>, por\u00e9m em todos os casos tentamos utilizar aquele espa\u00e7o de mem\u00f3ria como se tivesse um <code>float</code>.  </p> <pre><code>#include &lt;stdio.h&gt;\n\nunion Example {\n    int field1;\n    float field2;\n};\n\nint main() {\n    union Example example;\n\n    example.field1 = 10;\n    printf(\"result = %d\\n\", example.field2 + 1);\n    printf(\"result = %d\\n\", example.field2 + 1.5);\n    printf(\"result = %f\\n\", example.field2 + 1);\n    printf(\"result = %f\\n\", example.field2 + 1.5);\n}\n</code></pre> <p>N\u00e3o importa se tentarmos exibir o valor como se ele fosse um <code>int</code> (<code>%d</code>) ou <code>float</code> (<code>%f</code>) pois o calculo foi feito pensando que o campo de mem\u00f3ria tinha um float, ent\u00e3o o resultado se tornou lixo.  </p> <pre><code>result = -48637544\nresult = -2103905632\nresult = 1.000000\nresult = 1.500000\n</code></pre> <p>Tagged union \u00e9 uma estrutura de dados utilizada para evitar este tipo de problema.  </p>"},{"location":"data_types/#struct","title":"Struct","text":"<p>(Record)</p> <p>\u00c9 um tipo de dado composto por outros tipos de dados.  </p> <p>O espa\u00e7o de mem\u00f3ria ocupado pela struct \u00e9 a soma de cada tipo que a comp\u00f5e.  </p> <pre><code>struct {\n    field1\n    field2\n    field3\n}\n</code></pre> Class <p>Considero structs em esteroide, pois possuem o mesmo conceito de armazenar diversos tipos de dados em conjunto por\u00e9m adicionam outras ideias como: heran\u00e7a, encapsulamento, ...  </p> <p>Algumas linguagens conseguem reproduzir parte do comportamento de classes:  </p> C InheritanceEncapsulation <p>Type punning \u00e9 uma t\u00e9cnica que aproveita do fato que structs podem ser simples e apenas armazenarem os dados em sequ\u00eancia.  </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Base {\n    int field1;\n};\n\nstruct Derived {\n    struct Base base;\n    int field2;\n};\n\nint main() {\n    struct Derived *example = (struct Derived *)malloc(sizeof(struct Derived));\n\n    printf(\"example-&gt;base.field1 = %d\\n\", example-&gt;base.field1);\n    printf(\"example-&gt;field2 = %d\\n\", example-&gt;field2);\n\n    struct Base *example2 = (struct Base *)example;\n\n    printf(\"example2-&gt;field1 = %d\\n\", example2-&gt;field1);\n\n    printf(\"field1 address = %p\\n\", &amp;(example-&gt;base.field1));\n    printf(\"field1 address = %p\\n\", &amp;(example2-&gt;field1));\n}\n</code></pre> <pre><code>example-&gt;base.field1 = 0\nexample-&gt;field2 = 0\nexample2-&gt;field1 = 0\n0x56df3427b2a0\n0x56df3427b2a0\n</code></pre> <p>Note que precisamos declarar <code>Base</code> primeiro para que depois da convers\u00e3o o tratamento seja correto.  </p> <p>Basicamente a mem\u00f3ria \u00e9 organizada como:</p> Address Base Derived 0x00 field1 Base 0x04 field2 <p>E j\u00e1 que <code>Base</code> \u00e9 equivalente a <code>field1</code>, podemos reescrever como:  </p> Address Base Derived 0x00 field1 field1 0x04 field2 <p>Utilizando a mesma estrat\u00e9gia de heran\u00e7a, podemos criar um m\u00e9todo respons\u00e1vel por criar o objeto (<code>new_obj</code>) e apenas disponibilizar ele pelo headers.  </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Base {\n    int pub_field;\n\n    void (*pub_method)(struct Base *);\n};\n\nstruct Derived {\n    struct Base base;\n    int pvt_field;\n\n    void (*pvt_method)(struct Derived *);\n};\n\nvoid method1(struct Base *self) {\n    struct Derived *s = (struct Derived *)self;\n\n    printf(\"pub_field = %d\\n\", self-&gt;pub_field);\n\n    s-&gt;pvt_method(s);\n}\n\nvoid method2(struct Derived *self) {\n    printf(\"pvt_field = %d\\n\", self-&gt;pvt_field);\n}\n\nstruct Base *new_obj() {\n    struct Derived *example = (struct Derived *)malloc(sizeof(struct Derived));\n\n    example-&gt;base.pub_field = 10;\n    example-&gt;base.pub_method = &amp;method1;\n    example-&gt;pvt_field = 20;\n    example-&gt;pvt_method = &amp;method2;\n\n    return (struct Base *)example;\n}\n\nint main() {\n    struct Base *e = new_obj();\n\n    e-&gt;pub_method(e);\n}\n</code></pre> <pre><code>pub_field = 10\npvt_field = 20\n</code></pre> <p>Isto n\u00e3o impede outras pessoas de incluerem o seu arquivo <code>.c</code> e criarem <code>Derived</code> manualmente.  </p> <p>Uma maneira de bloquear este tipo de cria\u00e7\u00e3o \u00e9 utilizando anonymous structs com macros para temporariamente ter defini\u00e7\u00e3o daquela struct.  </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Base {\n    int pub_field;\n\n    void (*pub_method)(struct Base *);\n};\n\n#define DERIVED                                     \\\n    struct {                                        \\\n        struct Base base;                           \\\n        int pvt_field;                              \\\n        void (*pvt_method)(void *);                 \\\n    }\n\nvoid method1(struct Base *self) {\n    DERIVED *s = (DERIVED *)self;\n\n    printf(\"pub_field = %d\\n\", self-&gt;pub_field);\n\n    s-&gt;pvt_method(s);\n}\n\nvoid method2(void *self) {\n    DERIVED *s = (DERIVED *)self;\n\n    printf(\"pvt_field = %d\\n\", s-&gt;pvt_field);\n}\n\nstruct Base *new_obj() {\n    DERIVED *example = (DERIVED *)malloc(sizeof(DERIVED));\n\n    example-&gt;base.pub_field = 10;\n    example-&gt;base.pub_method = &amp;method1;\n    example-&gt;pvt_field = 20;\n    example-&gt;pvt_method = &amp;method2;\n\n    return (struct Base *)example;\n}\n\nint main() {\n    struct Base *e = new_obj();\n\n    e-&gt;pub_method(e);\n}\n\n#undef DERIVED\n</code></pre> <pre><code>pub_field = 10\npvt_field = 20\n</code></pre> <p>Por\u00e9m gera uma grande quantidade de warnings devido a falta de seguran\u00e7a quando lidando com anonymous structs.  </p>"},{"location":"data_types/array/c/","title":"C","text":""},{"location":"data_types/array/c/#array","title":"Array","text":"EmptySetPartial <pre><code>#include &lt;stdio.h&gt;\n\nint example[3];\n\nint main() {\n    printf(\"example[0] = %d\\n\", example[0]);\n    printf(\"example[1] = %d\\n\", example[1]);\n    printf(\"example[2] = %d\\n\", example[2]);\n}\n</code></pre> <pre><code>example[0] = 0\nexample[1] = 0\nexample[2] = 0\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint example[] = {1, 2, 3};\n\nint main() {\n    printf(\"example[0] = %d\\n\", example[0]);\n    printf(\"example[1] = %d\\n\", example[1]);\n    printf(\"example[2] = %d\\n\", example[2]);\n}\n</code></pre> <pre><code>example[0] = 1\nexample[1] = 2\nexample[2] = 3\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint example[3] = {1, 2};\n\nint main() {\n    printf(\"example[0] = %d\\n\", example[0]);\n    printf(\"example[1] = %d\\n\", example[1]);\n    printf(\"example[2] = %d\\n\", example[2]);\n}\n</code></pre> <pre><code>example[0] = 1\nexample[1] = 2\nexample[2] = 0\n</code></pre>"},{"location":"data_types/array/go/","title":"Go","text":""},{"location":"data_types/array/go/#array","title":"Array","text":"EmptySetPartial <pre><code>package main\n\nimport \"fmt\"\n\nvar example [3]int\n\nfunc main() {\n    fmt.Printf(\"example[0] = %d\\n\", example[0])\n    fmt.Printf(\"example[1] = %d\\n\", example[1])\n    fmt.Printf(\"example[2] = %d\\n\", example[2])\n}\n</code></pre> <pre><code>example[0] = 0\nexample[1] = 0\nexample[2] = 0\n</code></pre> <pre><code>package main\n\nimport \"fmt\"\n\nvar example = []int{1, 2, 3}\n\nfunc main() {\n    fmt.Printf(\"example[0] = %d\\n\", example[0])\n    fmt.Printf(\"example[1] = %d\\n\", example[1])\n    fmt.Printf(\"example[2] = %d\\n\", example[2])\n}\n</code></pre> <pre><code>example[0] = 1\nexample[1] = 2\nexample[2] = 3\n</code></pre> <pre><code>package main\n\nimport \"fmt\"\n\nvar example = [3]int{1, 2}\n\nfunc main() {\n    fmt.Printf(\"example[0] = %d\\n\", example[0])\n    fmt.Printf(\"example[1] = %d\\n\", example[1])\n    fmt.Printf(\"example[2] = %d\\n\", example[2])\n}\n</code></pre> <pre><code>example[0] = 1\nexample[1] = 2\nexample[2] = 0\n</code></pre>"},{"location":"data_types/array/python/","title":"Python","text":"Adaptation <p>Esta linguagem possui uma adapta\u00e7\u00e3o do conceito.</p>"},{"location":"data_types/array/python/#list","title":"List","text":"<p>List \u00e9 uma alternativa para arrays em algumas linguagens.  </p> <pre><code>from array import array\n\na = ['i', [1, 10, 100]]\n\nprint(f\"a = {a}\")\n</code></pre> <pre><code>a = ['i', [1, 10, 100]]\n</code></pre>"},{"location":"data_types/array/python/#array","title":"Array","text":"<p>A linguagem utiliza a classe (<code>array</code>) para simular alguns comportamentos de um array.  </p> <pre><code>from array import array\n\na = array('i', [1, 10, 100])\n\nprint(f\"a = {a}\")\n</code></pre> <pre><code>a = array('i', [1, 10, 100])\n</code></pre>"},{"location":"data_types/array/rust/","title":"Rust","text":""},{"location":"data_types/array/rust/#array","title":"Array","text":"EmptySet <p>Est\u00e1 linguagem n\u00e3o permite o uso sem antes ter sido inicializado</p> <pre><code>fn main() {\n    let example: [i32; 3];\n\n    // print!(\"example[0] = {:?}\\n\", example[0]);\n    // print!(\"example[1] = {:?}\\n\", example[1]);\n    // print!(\"example[2] = {:?}\\n\", example[2]);\n}\n</code></pre> <p>Tip</p> <p>\u00c9 poss\u00edvel inicializar todos com um mesmo valor para simular o comportamento de outras linguagens (inicializar com zeros).  </p> <pre><code>fn main() {\n    let example = [1, 2, 3];\n\n    print!(\"example[0] = {:?}\\n\", example[0]);\n    print!(\"example[1] = {:?}\\n\", example[1]);\n    print!(\"example[2] = {:?}\\n\", example[2]);\n}\n</code></pre> <pre><code>example[0] = 1\nexample[1] = 2\nexample[2] = 3\n</code></pre> <p>Inserir o mesmo valor em todas posi\u00e7\u00f5es.  </p> <pre><code>fn main() {\n    let example: [i32; 3] = [0; 3];\n\n    print!(\"example[0] = {:?}\\n\", example[0]);\n    print!(\"example[1] = {:?}\\n\", example[1]);\n    print!(\"example[2] = {:?}\\n\", example[2]);\n}\n</code></pre> <pre><code>example[0] = 0\nexample[1] = 0\nexample[2] = 0\n</code></pre>"},{"location":"data_types/bool/c/","title":"C","text":""},{"location":"data_types/bool/c/#bool","title":"Bool","text":"<pre><code>#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n  bool a = true;\n  bool b = false;\n\n  printf(\"a = %d\\n\", a);\n  printf(\"b = %d\\n\", b);\n}\n</code></pre> <pre><code>a = 1\nb = 0\n</code></pre>"},{"location":"data_types/bool/go/","title":"Go","text":""},{"location":"data_types/bool/go/#bool","title":"Bool","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var a bool = true\n    var b bool = false\n\n    fmt.Printf(\"a = %t\\n\", a)\n    fmt.Printf(\"b = %t\\n\", b)\n}\n</code></pre> <pre><code>a = true\nb = false\n</code></pre>"},{"location":"data_types/bool/python/","title":"Python","text":""},{"location":"data_types/bool/python/#bool","title":"Bool","text":"<pre><code>a = True\nb = False\n\nprint(f\"a = {a}\")\nprint(f\"b = {b}\")\n</code></pre> <pre><code>a = True\nb = False\n</code></pre>"},{"location":"data_types/bool/rust/","title":"Rust","text":""},{"location":"data_types/bool/rust/#bool","title":"Bool","text":"<pre><code>fn main() {\n    let a = true;\n    let b = false;\n\n    print!(\"a = {}\\n\", a);\n    print!(\"b = {}\\n\", b);\n}\n</code></pre> <pre><code>a = true\nb = false\n</code></pre>"},{"location":"data_types/char/c/","title":"C","text":""},{"location":"data_types/char/c/#bool","title":"Bool","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  char a = 'z';\n\n  printf(\"a = %c\\n\", a);\n}\n</code></pre> <pre><code>a = z\n</code></pre>"},{"location":"data_types/char/go/","title":"Go","text":""},{"location":"data_types/char/go/#bool","title":"Bool","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var a rune = 'z'\n\n    fmt.Printf(\"a = %c\\n\", a)\n}\n</code></pre> <pre><code>a = z\n</code></pre>"},{"location":"data_types/char/python/","title":"Python","text":"Adaptation <p>Esta linguagem possui uma adapta\u00e7\u00e3o do conceito.</p>"},{"location":"data_types/char/python/#char","title":"Char","text":"<p>Utilizar uma string de tamanho um \u00e9 uma maneira de trabalhar com apenas um char.  </p> <pre><code>a = \"z\"\n\nprint(f\"a = {a}\")\n</code></pre> <pre><code>a = z\n</code></pre>"},{"location":"data_types/char/rust/","title":"Rust","text":""},{"location":"data_types/char/rust/#bool","title":"Bool","text":"<pre><code>fn main() {\n    let a: char = 'z';\n\n    print!(\"a = {}\\n\", a);\n}\n</code></pre> <pre><code>a = z\n</code></pre>"},{"location":"data_types/enum/c/","title":"C","text":""},{"location":"data_types/enum/c/#enum","title":"Enum","text":"AutoSetBoth <pre><code>#include &lt;stdio.h&gt;\n\nenum Example { A, B, C };\n\nint main() {\n    printf(\"A = %d\\n\", A);\n    printf(\"B = %d\\n\", B);\n    printf(\"C = %d\\n\", C);\n}\n</code></pre> <pre><code>A = 0\nB = 1\nC = 2\n</code></pre> <pre><code>#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n\nenum Example {\n    A = 0,\n    B = 1,\n    C = 2\n};\n\nint main() {\n    printf(\"A = %d\\n\", A);\n    printf(\"B = %d\\n\", B);\n    printf(\"C = %d\\n\", C);\n}\n</code></pre> <pre><code>A = 0\nB = 1\nC = 2\n</code></pre> <pre><code>#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n\nenum Example {\n    A,\n    B = 25,\n    C\n};\n\nint main() {\n    printf(\"A = %d\\n\", A);\n    printf(\"B = %d\\n\", B);\n    printf(\"C = %d\\n\", C);\n}\n</code></pre> <pre><code>A = 0\nB = 25\nC = 26\n</code></pre>"},{"location":"data_types/enum/go/","title":"Go","text":"Adaptation <p>Esta linguagem possui uma adapta\u00e7\u00e3o do conceito.</p>"},{"location":"data_types/enum/go/#enum","title":"Enum","text":"<p>Enums s\u00e3o apenas nomes convertidos para n\u00famero durante a compila\u00e7\u00e3o e podem ser f\u00e1cilmente reproduzidos por definindo constantes com os valores desejados.  </p> SetAutoBoth <pre><code>package main\n\nimport \"fmt\"\n\nconst (\n    A = 0\n    B = 1\n    C = 2\n)\n\nfunc main() {\n    fmt.Printf(\"A = %d\\n\", A)\n    fmt.Printf(\"B = %d\\n\", B)\n    fmt.Printf(\"C = %d\\n\", C)\n}\n</code></pre> <pre><code>A = 0\nB = 1\nC = 2\n</code></pre> <p>Warning</p> <p>Ainda \u00e9 uma declara\u00e7\u00e3o de constante e n\u00e3o uma defini\u00e7\u00e3o de enum! Se voc\u00ea deixar de declarar os valores, ele ir\u00e1 utilizar o \u00faltimo valor para preencher os seguintes.  </p> <pre><code>const (\n    A = 0\n    B = 1\n    C\n)\n</code></pre> <pre><code>A = 0\nB = 1\nC = 1\n</code></pre> <p>A linguagem possui identificador que automaticamente se incrementa: <code>iota</code>.  </p> <pre><code>const (\n    A = iota\n    B\n    C\n)\n</code></pre> <p>Isto faz com que as constantes B e C tamb\u00e9m recebam o valor de <code>iota</code>, por\u00e9m a cada uso ter\u00e1 crescido.  </p> <pre><code>A = 0\nB = 1\nC = 2\n</code></pre> <p>Note</p> <p>O valor de <code>iota</code> \u00e9 resetado para zero sempre que a palavra reservada <code>const</code> aparece.  </p> <pre><code>const (\n    A = iota\n    B\n    C\n)\n\nconst D = iota\n</code></pre> <pre><code>A = 0\nB = 1\nC = 2\nD = 0\n</code></pre> <p>Warning</p> <p>O valor de <code>iota</code> cresce mesmo sem ter sido utilizado naquela delcara\u00e7\u00e3o.  </p> <pre><code>const (\n    A = iota\n    B = 25\n    C = iota\n)\n</code></pre> <pre><code>A = 0\nB = 25\nC = 2\n</code></pre> <pre><code>const (\n    A = iota\n    B = iota + 24\n    C\n)\n</code></pre> <pre><code>A = 0\nB = 25\nC = 26\n</code></pre>"},{"location":"data_types/enum/python/","title":"Python","text":"Adaptation <p>Esta linguagem possui uma adapta\u00e7\u00e3o do conceito.</p>"},{"location":"data_types/enum/python/#enum","title":"Enum","text":"<p>A linguagem utiliza outra classe (<code>Enum</code>) para ajudar a reproduzir o comportamento de um enum.  </p> SetAuto <pre><code>from enum import Enum\n\nclass Example(Enum):\n    A = 0\n    B = 1\n    C = 2\n\nprint(f\"A = {Example.A}\")\nprint(f\"B = {Example.B}\")\nprint(f\"C = {Example.C}\")\n</code></pre> <pre><code>A = Example.A\nB = Example.B\nC = Example.C\n</code></pre> <pre><code>from enum import Enum, auto\n\nclass Example(Enum):\n    A = auto()\n    B = auto()\n    C = auto()\n\nprint(f\"A = {Example.A}\")\nprint(f\"B = {Example.B}\")\nprint(f\"C = {Example.C}\")\n</code></pre> <pre><code>A = Example.A\nB = Example.B\nC = Example.C\n</code></pre>"},{"location":"data_types/enum/rust/","title":"Rust","text":""},{"location":"data_types/enum/rust/#enum","title":"Enum","text":"Auto <pre><code>#[derive(Debug)]\nenum Example {\n    A,\n    B,\n    C,\n}\n\nfn main() {\n    print!(\"A = {:?}\\n\", Example::A);\n    print!(\"B = {:?}\\n\", Example::B);\n    print!(\"C = {:?}\\n\", Example::C);\n}\n</code></pre> <pre><code>A = A\nB = B\nC = C\n</code></pre>"},{"location":"data_types/float/c/","title":"C","text":""},{"location":"data_types/float/c/#float","title":"Float","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  float a = 3.14;\n\n  printf(\"a = %f\\n\", a);\n}\n</code></pre> <pre><code>a = 3.140000\n</code></pre>"},{"location":"data_types/float/go/","title":"Go","text":""},{"location":"data_types/float/go/#float","title":"Float","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var a float32 = 3.14\n    var b float64 = 3.14\n\n    fmt.Printf(\"a = %f\\n\", a)\n    fmt.Printf(\"b = %f\\n\", b)\n}\n</code></pre> <pre><code>a = 3.140000\nb = 3.140000\n</code></pre>"},{"location":"data_types/float/python/","title":"Python","text":""},{"location":"data_types/float/python/#float","title":"Float","text":"<pre><code>a = 3.14\n\nprint(f\"a = {a}\")\n</code></pre> <pre><code>a = 3.14\n</code></pre>"},{"location":"data_types/float/rust/","title":"Rust","text":""},{"location":"data_types/float/rust/#float","title":"Float","text":"<pre><code>fn main() {\n    let a: f32 = 3.14;\n    let b: f64 = 3.14;\n\n    print!(\"a = {}\\n\", a);\n    print!(\"b = {}\\n\", b);\n}\n</code></pre> <pre><code>a = 3.14\nb = 3.14\n</code></pre>"},{"location":"data_types/int/c/","title":"C","text":""},{"location":"data_types/int/c/#int","title":"Int","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  int a = 10;\n\n  printf(\"a = %d\\n\", a);\n}\n</code></pre> <pre><code>a = 10\n</code></pre>"},{"location":"data_types/int/go/","title":"Go","text":""},{"location":"data_types/int/go/#int","title":"Int","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var a int = 10\n    var b int8 = 10\n    var c int16 = 10\n    var d int32 = 10\n    var e int64 = 10\n    var f uint = 10\n    var g uint8 = 10\n    var h uint16 = 10\n    var i uint32 = 10\n    var j uint64 = 10\n\n    fmt.Printf(\"a = %d\\n\", a)\n    fmt.Printf(\"b = %d\\n\", b)\n    fmt.Printf(\"c = %d\\n\", c)\n    fmt.Printf(\"d = %d\\n\", d)\n    fmt.Printf(\"e = %d\\n\", e)\n    fmt.Printf(\"f = %d\\n\", f)\n    fmt.Printf(\"g = %d\\n\", g)\n    fmt.Printf(\"h = %d\\n\", h)\n    fmt.Printf(\"i = %d\\n\", i)\n    fmt.Printf(\"j = %d\\n\", j)\n}\n</code></pre> <pre><code>a = 10\nb = 10\nc = 10\nd = 10\ne = 10\nf = 10\ng = 10\nh = 10\ni = 10\nj = 10\n</code></pre>"},{"location":"data_types/int/python/","title":"Python","text":""},{"location":"data_types/int/python/#int","title":"Int","text":"<pre><code>a = 10\n\nprint(f\"a = {a}\")\n</code></pre> <pre><code>a = 10\n</code></pre>"},{"location":"data_types/int/rust/","title":"Rust","text":""},{"location":"data_types/int/rust/#int","title":"Int","text":"<pre><code>fn main() {\n    let a: i8 = 10;\n    let b: i16 = 10;\n    let c: i32 = 10;\n    let d: i64 = 10;\n    let e: i128 = 10;\n    let f: u8 = 10;\n    let g: u16 = 10;\n    let h: u32 = 10;\n    let i: u64 = 10;\n    let j: u128 = 10;\n\n    print!(\"a = {}\\n\", a);\n    print!(\"b = {}\\n\", b);\n    print!(\"c = {}\\n\", c);\n    print!(\"d = {}\\n\", d);\n    print!(\"e = {}\\n\", e);\n    print!(\"f = {}\\n\", f);\n    print!(\"g = {}\\n\", g);\n    print!(\"h = {}\\n\", h);\n    print!(\"i = {}\\n\", i);\n    print!(\"j = {}\\n\", j);\n}\n</code></pre> <pre><code>a = 10\nb = 10\nc = 10\nd = 10\ne = 10\nf = 10\ng = 10\nh = 10\ni = 10\nj = 10\n</code></pre>"},{"location":"data_types/struct/c/","title":"C","text":""},{"location":"data_types/struct/c/#struct","title":"Struct","text":"<pre><code>#include &lt;stdio.h&gt;\n\nstruct Example {\n  int field1;\n  float field2;\n};\n\nint main() {\n  struct Example example;\n  example.field1 = 1;\n  example.field2 = 5.5;\n\n  printf(\"example.field1 = %d\\n\", example.field1);\n  printf(\"example.field2 = %f\\n\", example.field2);\n}\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 5.500000\n</code></pre>"},{"location":"data_types/struct/go/","title":"Go","text":""},{"location":"data_types/struct/go/#struct","title":"Struct","text":"<pre><code>package main\n\nimport \"fmt\"\n\ntype Example struct {\n    field1 int\n    field2 float32\n}\n\nfunc main() {\n    var example Example\n    example.field1 = 1\n    example.field2 = 5.5\n\n    fmt.Printf(\"example.field1 = %d\\n\", example.field1)\n    fmt.Printf(\"example.field2 = %f\\n\", example.field2)\n}\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 5.500000\n</code></pre>"},{"location":"data_types/struct/python/","title":"Python","text":"Not implemented <p>Esta linguagem n\u00e3o possui este conceito implementado.</p>"},{"location":"data_types/struct/python/#class","title":"Class","text":"<p>Class \u00e9 uma alternativa para struct em algumas linguagens.  </p> <pre><code>class Example:\n    pass\n\nexample = Example()\nexample.field1 = 1\nexample.field2 = 5.5\n\nprint(f\"example.field1 = {example.field1}\")\nprint(f\"example.field2 = {example.field2}\")\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 5.5\n</code></pre>"},{"location":"data_types/struct/rust/","title":"Rust","text":""},{"location":"data_types/struct/rust/#struct","title":"Struct","text":"<pre><code>struct Example {\n    field1: i32,\n    field2: f32,\n}\n\nfn main() {\n    let example = Example {\n        field1: 1,\n        field2: 5.5,\n    };\n\n    print!(\"example.field1 = {}\\n\", example.field1);\n    print!(\"example.field2 = {}\\n\", example.field2);\n}\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 5.5\n</code></pre>"},{"location":"data_types/union/c/","title":"C","text":""},{"location":"data_types/union/c/#union","title":"Union","text":"<pre><code>#include &lt;stdio.h&gt;\n\nunion Example {\n  int field1;\n  float field2;\n};\n\nint main() {\n  union Example example;\n\n  example.field1 = 1;\n  printf(\"example.field1 = %d\\n\", example.field1);\n  printf(\"example.field2 = %f\\n\\n\", example.field2);\n\n  example.field2 = 5.5;\n  printf(\"example.field1 = %d\\n\", example.field1);\n  printf(\"example.field2 = %f\\n\", example.field2);\n}\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 0.000000\n\nexample.field1 = 1085276160\nexample.field2 = 5.500000\n</code></pre>"},{"location":"data_types/union/go/","title":"Go","text":"Not implemented <p>Esta linguagem n\u00e3o possui este conceito implementado.</p>"},{"location":"data_types/union/python/","title":"Python","text":"Not implemented <p>Esta linguagem n\u00e3o possui este conceito implementado.</p>"},{"location":"data_types/union/rust/","title":"Rust","text":""},{"location":"data_types/union/rust/#union","title":"Union","text":"<pre><code>union Example {\n    field1: i32,\n    field2: f32,\n}\n\nfn main() {\n    let mut example = Example { field1: 1 };\n    print!(\"example.field1 = {}\\n\", unsafe { example.field1 });\n    print!(\"example.field2 = {}\\n\", unsafe { example.field2 });\n\n    example.field2 = 5.5;\n    print!(\"example.field1 = {}\\n\", unsafe { example.field1 });\n    print!(\"example.field2 = {}\\n\", unsafe { example.field2 });\n}\n</code></pre> <pre><code>example.field1 = 1\nexample.field2 = 0.000000000000000000000000000000000000000000001\nexample.field1 = 1085276160\nexample.field2 = 5.5\n</code></pre>"},{"location":"how_to_work_with_x/","title":"Index","text":"<p>A ideia \u00e9 reunir exemplos b\u00e1sicos de como trabalhar com um conhecimento gen\u00e9rico computa\u00e7\u00e3o.  </p> <p>Iremos ignorar tratamentos de erros pois, no contexto de exemplos, seria apenas encerrar o programa. Exemplo em Go:  </p> Not HandlingHandling <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    file, _ := os.OpenFile(\"example.txt\", os.O_WRONLY, 0000)\n    file.Write([]byte(\"Example\"))\n    file.Close()\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    file, err := os.OpenFile(\"example.txt\", os.O_WRONLY, 0000)\n\n    if err != nil {\n        os.Exit(1)\n    }\n\n    _, err := file.Write([]byte(\"Example\"))\n\n    if err != nil {\n        os.Exit(2)\n    }\n\n    file.Close()\n\n    if err != nil {\n        os.Exit(3)\n    }\n}\n</code></pre> <p>Warning</p> <p>Tratamento de erros \u00e9 importante e n\u00e3o deve ser ignorado no dia-a-dia.  </p>"},{"location":"how_to_work_with_x/#print-scan","title":"Print &amp; Scan","text":"<p>Se\u00e7\u00e3o que fala sobre duas a\u00e7\u00f5es cl\u00e1ssicas de se aprender em programa\u00e7\u00e3o:  </p> <ul> <li>Print: Escrever um conte\u00fado na sa\u00edda padr\u00e3o (<code>stdout</code>)</li> <li>Scan: Ler um conte\u00fado na entrada padr\u00e3o (<code>stdin</code>)</li> </ul> <p>Note</p> <p>\u00c9 bom saber que tudo lido e escrito s\u00e3o bytes, apenas dentro do seu programa que possuem um tipo espec\u00edfico.  </p> <ul> <li>Formatted<ul> <li>Print: Transformamos uma devida vari\u00e1vel em bytes para que ela seja exibida na tela</li> <li>Scan: Definimos o tipo de vari\u00e1vel a qual queremos que os bytes consumidos sejam convertidos</li> </ul> </li> <li>Raw<ul> <li>Print &amp; Scan: N\u00e3o existe nenhuma convers\u00e3o, estamos lendo e escrevendo bytes</li> </ul> </li> <li>IO<ul> <li>Print &amp; Scan: Mesmo que Raw por\u00e9m utilizando <code>stdin</code>/<code>stdout</code> diretamente</li> </ul> </li> </ul>"},{"location":"how_to_work_with_x/#file","title":"File","text":"<p>Se\u00e7\u00e3o que fala sobre as duas a\u00e7\u00f5es mais essenciais para arquivos:  </p> <ul> <li>Read: Ler o conte\u00fado de um arquivo</li> <li>Write: Escrever conte\u00fado em um arquivo</li> </ul> <p>Note</p> <p>A sa\u00edda e entrada padr\u00e3o s\u00e3o arquivos, ent\u00e3o podemos utilizar estes m\u00e9todos para escrever na sa\u00edda/entrada padr\u00e3o.  </p> File Permissions <p>Arquivos possuem um controle de permiss\u00f5es b\u00e1sico para limitar como ind\u00edviduos podem utiliza-lo. Nove bits s\u00e3o utilizados para este controle:  </p> <pre><code>+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| bit 1 | bit 2 | bit 3 | bit 4 | bit 5 | bit 6 | bit 7 | bit 8 | bit 9 |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n</code></pre> <p>Estes 9 bits s\u00e3o divididos entre 3 tipos de usu\u00e1rios, cada um com 3 bits que dizem o que eles podem fazer com aquele arquivo:  </p> <pre><code>+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n|         owner         |         group         |        others         |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| bit 1 | bit 2 | bit 3 | bit 4 | bit 5 | bit 6 | bit 7 | bit 8 | bit 9 |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n</code></pre> <ul> <li>Owner: \u00c9 o atual dono do arquivo (n\u00e3o necessariamente quem criou o arquivo).  </li> <li>Group: O seu computador pode ter diversos usu\u00e1rios (imagine um computador para a fam\u00edlia inteira) e \u00e9 poss\u00edvel categorizar todos juntos em um grupo para facilmente dar permiss\u00e3o do arquivo para eles. \u00c9 importante eu ressaltar que um usu\u00e1rio pode estar em diversos grupos.    </li> <li>Others: Qualquer usu\u00e1rio que n\u00e3o tenha caido dentro dos tipos acima.  </li> </ul> <p>O primeiro bit de cada tipo de usu\u00e1rio representa read e diz se aquele tipo de usu\u00e1rio pode ler o arquivo ou n\u00e3o. Se aquele bit estiver 1, ent\u00e3o ele pode ler.  </p> <pre><code>+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n|         owner         |         group         |        others         |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| bit 1 | bit 2 | bit 3 | bit 4 | bit 5 | bit 6 | bit 7 | bit 8 | bit 9 |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| READ  |       |       | READ  |       |       | READ  |       |       |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n</code></pre> <p>O segundo bit de cada tipo de usu\u00e1rio representa write e diz se aquele tipo de usu\u00e1rio pode escrever no arquivo ou n\u00e3o. Se aquele bit estiver 1, ent\u00e3o ele pode escrever.  </p> <pre><code>+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n|         owner         |         group         |        others         |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| bit 1 | bit 2 | bit 3 | bit 4 | bit 5 | bit 6 | bit 7 | bit 8 | bit 9 |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| READ  | WRITE |       | READ  | WRITE |       | READ  | WRITE |       |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n</code></pre> <p>O terceiro bit de cada tipo de usu\u00e1rio representa execute e diz se aquele tipo de usu\u00e1rio pode executar o arquivo ou n\u00e3o. Se aquele bit estiver 1, ent\u00e3o ele pode executar.  </p> <pre><code>+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n|         owner         |         group         |        others         |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| bit 1 | bit 2 | bit 3 | bit 4 | bit 5 | bit 6 | bit 7 | bit 8 | bit 9 |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| READ  | WRITE | EXEC  | READ  | WRITE | EXEC  | READ  | WRITE | EXEC  |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n</code></pre> <p>Se eu te mostrasse os bits <code>111 100 000</code> voc\u00ea conseguiria notar que permiss\u00e3o cada tipo de usu\u00e1rio teria sobre o arquivo? (1)</p> <ol> <li>Owner can read, write, execute Group can read Others can't do anything  </li> </ol> <p>\u00c9 muito normal utilizar n\u00fameros na base 8 (octal) para representar essas permiss\u00f5es. O exemplo anterior seria escrito como <code>740</code> (1).</p> <ol> <li>111 --&gt; 7     100 --&gt; 4     000 --&gt; 0  </li> </ol>"},{"location":"how_to_work_with_x/#directory","title":"Directory","text":"<p>Se\u00e7\u00e3o que fala sobre as a\u00e7\u00f5es mais comuns em um diret\u00f3rio:  </p> <ul> <li>Create: Criar um diret\u00f3rio</li> <li>List: Listar arquivos de um diret\u00f3rio</li> <li>Remove: Remover um diret\u00f3rio</li> </ul> Directory Permissions <p>\"Everything is a file\"</p> <p>Diret\u00f3rios s\u00e3o arquivos (inodes) com informa\u00e7\u00e3o de outros arquivos, \u00fanica diferen\u00e7a \u00e9 que uma abstra\u00e7\u00e3o foi criada para voc\u00ea interagir com eles de forma segura.  </p> <p>Isto quer dizer que possui a mesma l\u00f3gica de File Permissions vista na se\u00e7\u00e3o acima, tirando que pastas n\u00e3o podem ser executadas ent\u00e3o o bit execute troca de significado para search.  </p> <pre><code>+--------+--------+--------+--------+--------+--------+--------+--------+--------+\n|           owner          |           group          |          others          |\n+--------+--------+--------+--------+--------+--------+--------+--------+--------+\n| bit 1  | bit 2  | bit 3  | bit 4  | bit 5  | bit 6  | bit 7  | bit 8  | bit 9  |\n+--------+--------+--------+--------+--------+--------+--------+--------+--------+\n| READ   | WRITE  | SEARCH | READ   | WRITE  | SEARCH | READ   | WRITE  | SEARCH |\n+--------+--------+--------+--------+--------+--------+--------+--------+--------+\n</code></pre> <p>O que cada combina\u00e7\u00e3o de permiss\u00f5es te deixa fazer:  </p> <ul> <li><code>---</code>: N\u00e3o pode interagir com o diret\u00f3rio</li> <li><code>r--</code>: Permite descobrir os arquivos do diret\u00f3rio<ul> <li><code>ls &lt;directory&gt;</code></li> </ul> </li> <li><code>-w-</code>: ???</li> <li><code>--x</code>: Permite acessar o diret\u00f3rio e subdiret\u00f3rios<ul> <li><code>cd &lt;directory&gt;</code></li> <li><code>ls &lt;directory&gt;/&lt;subdirectory&gt;</code></li> </ul> </li> <li><code>rw-</code>: ???</li> <li><code>r-x</code>: Permite descobrir os arquivos do diret\u00f3rio e suas metadatas<ul> <li><code>ls -l &lt;directory&gt;</code></li> </ul> </li> <li><code>-wx</code>: Permite modificar arquivos do diret\u00f3rio<ul> <li><code>echo \"example\" &gt; &lt;directory&gt;/file</code></li> <li><code>touch &lt;directory&gt;/file</code></li> <li><code>mv &lt;directory&gt;/file file</code></li> <li>`rm /file <li><code>cp &lt;directory&gt;/file file2</code></li> <li><code>rwx</code>: Permite tudo</li>"},{"location":"how_to_work_with_x/#memory","title":"Memory","text":"<p>Se\u00e7\u00e3o que fala sobre como a linguagem se comporta em rela\u00e7\u00e3o a armazenamento de dados na mem\u00f3ria RAM (heap).  </p> <ul> <li>Alocar</li> <li>Desalocar</li> </ul>"},{"location":"how_to_work_with_x/#process","title":"Process","text":"<ul> <li>Fork</li> <li>Exec</li> <li>Spawn / Clone?</li> </ul>"},{"location":"how_to_work_with_x/#thread","title":"Thread","text":""},{"location":"how_to_work_with_x/#network","title":"Network","text":"<ul> <li>UDP</li> <li>TCP</li> </ul>"},{"location":"how_to_work_with_x/#log","title":"Log","text":"<p>Se\u00e7\u00e3o que fala sobre registrar eventos do seu programa (logs).  </p> <p>Note que n\u00e3o existe regra de onde registrar estes eventos, n\u00f3s poderiamos:</p> <ul> <li>File: Escreve-los em arquivos</li> <li>Network: Envia-los para servers</li> <li>Stderr: Escreve-los na sa\u00edda de erro padr\u00e3o</li> </ul> <p>E poderiamos fazer em m\u00faltiplos deles ao mesmo tempo.  </p> Stdin, Stdout, Stderr <p>Por padr\u00e3o programas possuem 3 fluxo de dados:</p> <ul> <li>stdin: Entrada padr\u00e3o</li> <li>stdout: Sa\u00edda padr\u00e3o</li> <li>stderr: Sa\u00edda de erro padr\u00e3o</li> </ul> <p>Em Print &amp; Scan vimos comandos para interagir com <code>stdin</code> e <code>stdout</code>, por\u00e9m logs s\u00e3o conhecidos por interagirem com <code>stderr</code>.  </p> <pre><code>flowchart LR\n    stdin[stdin]\n    stdout[stdout]\n    stderr[stderr]\n    program((Program))\n\n    stdin --&gt; program\n    program --&gt; stdout\n    program --&gt; stderr</code></pre> <p>Muitos programas utilizando <code>stdout</code> de um programa como <code>stdin</code> de outro programa para construir uma integra\u00e7\u00e3o entre eles:  </p> <pre><code>flowchart LR\n    stdin[stdin]\n    stdout[stdout]\n    stderr[stderr]\n    program((Program 1))\n\n    stdin2[stdin]\n    stdout2[stdout]\n    stderr2[stderr]\n    program2((Program 2))\n\n    stdin --&gt; program\n    program --&gt; stdout\n    program --&gt; stderr\n\n    stdout --&gt; stdin2\n    stdin2 --&gt; program2\n    program2 --&gt; stdout2\n    program2 --&gt; stderr2</code></pre> <p>Consequentemente o <code>stderr</code> acaba sendo bom para escrever mensagens de logs, pois essa mensagens acabam n\u00e3o sendo enviadas para o pr\u00f3ximo fluxo do programas.  </p> <p>Example</p> <p>Bash faz o link entre <code>stdout</code> de um programa com <code>stdin</code> de outro utilizando o operador <code>|</code>:  </p> <pre><code>ls -l | grep \"file.txt\"\n</code></pre>"},{"location":"how_to_work_with_x/#file-lock","title":"File Lock","text":"<p>Se\u00e7\u00e3o que fala sobre travas para arquivos.  </p> <p>Basicamente existem dois tipos de travas:  </p> <ul> <li>Shared lock<ul> <li>Tamb\u00e9m conhecida como read lock</li> <li>Diversos processos/threads podem possuir est\u00e1 trava ao mesmo tempo</li> <li>\u00c9 uma maneira de sinalizar que o arquivo est\u00e1 sendo utilizado para leitura mas nenhuma modifica\u00e7\u00e3o vai acontecer nele</li> </ul> </li> <li>Exclusive lock<ul> <li>Tamb\u00e9m conhecida como write lock</li> <li>Apenas um processo/thread pode possuir est\u00e1 trava em um determinado tempo</li> <li>\u00c9 uma maneira de sinalizar que o arquivo pode estar sendo modificado e leitura dele pode trazer informa\u00e7\u00f5es incorretas</li> </ul> </li> </ul> Advisory Lock <p>Linux n\u00e3o implementa \"Mandatory locking\", ou seja, estas travas n\u00e3o proibem outros processos/threads de alterarem os arquivos.  </p> <p>Por\u00e9m implementa \"Advisory locks\", ou seja, \u00e9 uma cortesia dos processos/threads verificarem se o arquivo est\u00e1 travado ou n\u00e3o antes de acessa-lo.  </p> <p>Em outras palavras:</p> Process 1 Process 2 Result Locks Locks \ud83d\udc4d Locks No Locks \u274c No Locks Locks \u274c No Locks No Locks \u274c"},{"location":"how_to_work_with_x/directory/c/","title":"C","text":""},{"location":"how_to_work_with_x/directory/c/#create-directory","title":"Create directory","text":"<pre><code>#include &lt;sys/stat.h&gt;\n\nint main() {\n  mkdir(\"example\", 0777);\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/c/#list-files","title":"List files","text":"Stream Content <pre><code>#include &lt;dirent.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n    DIR *dir = opendir(\"example\");\n    struct dirent *directory_entry = readdir(dir);\n\n    while (directory_entry != NULL) {\n        printf(\"%s\\n\", directory_entry-&gt;d_name);\n        directory_entry = readdir(dir);\n    }\n\n    closedir(dir);\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/c/#remove-directory","title":"Remove directory","text":"<pre><code>#include &lt;unistd.h&gt;\n\nint main() {\n  rmdir(\"example\");\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/go/","title":"Go","text":""},{"location":"how_to_work_with_x/directory/go/#create-directory","title":"Create directory","text":"<pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    os.Mkdir(\"example\", 0777)\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/go/#list-files","title":"List files","text":"All ContentStream ContentStream Content 2 <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    files, _ := os.ReadDir(\"example\")\n\n    for _, file := range files {\n        println(file.Name())\n    }\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    dir, _ := os.Open(\"example\")\n    files, _ := dir.ReadDir(10) // Read ten records.\n\n    for _, file := range files {\n        println(file.Name())\n    }\n\n    dir.Close()\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    dir, _ := os.OpenFile(\"example\", os.O_RDONLY, 0000)\n    files, _ := dir.ReadDir(10) // Read ten records.\n\n    for _, file := range files {\n        println(file.Name())\n    }\n\n    dir.Close()\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/go/#remove-directory","title":"Remove directory","text":"<pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    os.Remove(\"example\")\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/python/","title":"Python","text":""},{"location":"how_to_work_with_x/directory/python/#create-directory","title":"Create directory","text":"12 <pre><code>import os\n\nos.mkdir(\"example\")\n</code></pre> <pre><code>from pathlib import Path\n\nPath(\"example\").mkdir()\n</code></pre>"},{"location":"how_to_work_with_x/directory/python/#list-files","title":"List files","text":"All ContentStream Content <pre><code>import os\n\nfiles = os.listdir(\"example\")\n\nfor file in files:\n    print(file)\n</code></pre> <pre><code>from pathlib import Path\n\nfiles = Path(\"example\").iterdir()\n\nfor file in files:\n    print(file)\n</code></pre>"},{"location":"how_to_work_with_x/directory/python/#remove-directory","title":"Remove directory","text":"12 <pre><code>import os\n\nos.rmdir(\"example\")\n</code></pre> <pre><code>from pathlib import Path\n\nPath(\"example\").rmdir()\n</code></pre>"},{"location":"how_to_work_with_x/directory/rust/","title":"Rust","text":""},{"location":"how_to_work_with_x/directory/rust/#create-directory","title":"Create directory","text":"<pre><code>use std::fs::create_dir;\n\nfn main() {\n    create_dir(\"example\");\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/rust/#list-files","title":"List files","text":"Stream Content <pre><code>use std::fs::read_dir;\n\nfn main() {\n    let files = read_dir(\"example\").unwrap();\n\n    for file in files {\n        println!(\"{:?}\", file.unwrap().file_name());\n    }\n}\n</code></pre>"},{"location":"how_to_work_with_x/directory/rust/#remove-directory","title":"Remove directory","text":"<pre><code>use std::fs::remove_dir;\n\nfn main() {\n    remove_dir(\"example\");\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/c/","title":"C","text":""},{"location":"how_to_work_with_x/file/c/#read-file","title":"Read File","text":"Stream Content <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char partial_content[10];\n\n    FILE *file = fopen(\"example.txt\", \"r\");\n    fread(partial_content, 1, 9, file);\n    fclose(file);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/c/#write-to-file","title":"Write to File","text":"Stream Content <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    FILE *file = fopen(\"example.txt\", \"w\");\n    fwrite(\"Example\", 1, 7, file);\n    fclose(file);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/go/","title":"Go","text":""},{"location":"how_to_work_with_x/file/go/#read-file","title":"Read File","text":"All ContentStream Content <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    content, _ := os.ReadFile(\"example.txt\")\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    partial_content := make([]byte, 10)\n\n    file, _ := os.OpenFile(\"example.txt\", os.O_RDONLY, 0000)\n    file.Read(partial_content)\n    file.Close()\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/go/#write-to-file","title":"Write to File","text":"All ContentStream Content <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    os.WriteFile(\"example.txt\", []byte(\"Example\"), 0600)\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    file, _ := os.OpenFile(\"example.txt\", os.O_WRONLY, 0000)\n    file.Write([]byte(\"Example\"))\n    file.Close()\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/python/","title":"Python","text":""},{"location":"how_to_work_with_x/file/python/#read-file","title":"Read File","text":"All ContentAll Content 2All Content 3Stream ContentStream Content 2 <pre><code>file = open(\"example.txt\", \"r\")\ncontent = file.read()\nfile.close()\n</code></pre> <pre><code>with open(\"example.txt\", \"r\") as file:\n    content = file.read()\n</code></pre> <pre><code>from pathlib import Path\n\ncontent = Path(\"example.txt\").read_text()\n</code></pre> <pre><code>file = open(\"example.txt\", \"r\")\npartial_content = file.read(30)\nfile.close()\n</code></pre> <pre><code>with open(\"example.txt\", \"r\") as file:\n    partial_content = file.read(30)\n</code></pre>"},{"location":"how_to_work_with_x/file/python/#write-to-file","title":"Write to File","text":"All ContentStream ContentStream Content 2 <pre><code>from pathlib import Path\n\nPath(\"example.txt\").write_text(\"Example\")\n</code></pre> <pre><code>file = open(\"example.txt\", \"w\")\nfile.write(\"Example\")\nfile.close()\n</code></pre> <pre><code>with open(\"example.txt\", \"w\") as file:\n    file.write(\"Example\")\n</code></pre>"},{"location":"how_to_work_with_x/file/rust/","title":"Rust","text":""},{"location":"how_to_work_with_x/file/rust/#read-file","title":"Read File","text":"All ContentAll Content 2Stream ContentStream Content 2 <pre><code>use std::{fs::File, io::Read};\n\nfn main() {\n    let mut content = String::new();\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.read_to_string(&amp;mut content).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::OpenOptions, io::Read};\n\nfn main() {\n    let mut content = String::new();\n    let mut file = OpenOptions::new().read(true).open(\"example.txt\").unwrap();\n    file.read_to_string(&amp;mut content).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::File, io::Read};\n\nfn main() {\n    let mut partial_content: [u8; 30] = [0; 30];\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.read(&amp;mut partial_content).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::OpenOptions, io::Read};\n\nfn main() {\n    let mut content = String::new();\n    let mut file = OpenOptions::new().read(true).open(\"example.txt\").unwrap();\n    file.read(&amp;mut partial_content).unwrap();\n}\n</code></pre>"},{"location":"how_to_work_with_x/file/rust/#write-to-file","title":"Write to File","text":"All ContentAll Content 2Stream ContentStream Content 2 <pre><code>use std::{fs::File, io::Write};\n\nfn main() {\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.write_all(\"Example\".as_bytes()).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::OpenOptions, io::Write};\n\nfn main() {\n    let mut file = OpenOptions::new().write(true).open(\"example.txt\").unwrap();\n    file.write_all(\"Example\".as_bytes()).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::File, io::Write};\n\nfn main() {\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.write(\"Example\".as_bytes()).unwrap();\n}\n</code></pre> <pre><code>use std::{fs::File, io::Write};\n\nfn main() {\n    let mut file = OpenOptions::new().write(true).open(\"example.txt\").unwrap();\n    file.write(\"Example\".as_bytes()).unwrap();\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/","title":"C","text":""},{"location":"how_to_work_with_x/file_lock/c/#shared-lock","title":"Shared Lock","text":""},{"location":"how_to_work_with_x/file_lock/c/#flock","title":"flock","text":"<pre><code>#include &lt;sys/file.h&gt;\n\nint main() {\n    int fd = open(\"example.txt\", O_RDONLY);\n    flock(fd, LOCK_SH);\n    // ...\n    flock(fd, LOCK_UN);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#fcntl-advisory-record-locking","title":"fcntl \"Advisory record locking\"","text":"<pre><code>#include &lt;sys/file.h&gt;\n\nint main() {\n    int fd = open(\"example.txt\", O_RDONLY);\n    struct flock fl;\n\n    fl.l_whence = SEEK_SET;\n    fl.l_start = 0;\n    fl.l_len = 0;\n    fl.l_type = F_RDLCK;\n\n    fcntl(fd, F_SETLKW, &amp;fl);\n    // ...\n    fl.l_type = F_UNLCK;\n    fcntl(fd, F_SETLKW, &amp;fl);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#fcntl-open-file-description-locks-non-posix","title":"fcntl \"Open file description locks (non-POSIX)\"","text":"WIP<pre><code>//\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#exclusive-lock","title":"Exclusive Lock","text":""},{"location":"how_to_work_with_x/file_lock/c/#flock_1","title":"flock","text":"<pre><code>#include &lt;sys/file.h&gt;\n\nint main() {\n    int fd = open(\"example.txt\", O_RDWR);\n    flock(fd, LOCK_EX);\n    // ...\n    flock(fd, LOCK_UN);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#lockf","title":"lockf","text":"<pre><code>#include &lt;sys/file.h&gt;\n\nint main() {\n    int fd = open(\"example.txt\", O_RDWR);\n    lockf(fd, F_LOCK, 0);\n    // ...\n    lockf(fd, F_ULOCK, 0);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#fcntl-advisory-record-locking_1","title":"fcntl \"Advisory record locking\"","text":"<pre><code>#include &lt;sys/file.h&gt;\n\nint main() {\n    int fd = open(\"example.txt\", O_RDWR);\n    struct flock fl;\n\n    fl.l_whence = SEEK_SET;\n    fl.l_start = 0;\n    fl.l_len = 0;\n    fl.l_type = F_WRLCK;\n\n    fcntl(fd, F_SETLKW, &amp;fl);\n    // ...\n    fl.l_type = F_UNLCK;\n    fcntl(fd, F_SETLKW, &amp;fl);\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/c/#fcntl-open-file-description-locks-non-posix_1","title":"fcntl \"Open file description locks (non-POSIX)\"","text":"WIP<pre><code>//\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/go/","title":"Go","text":"Third Party <p>Esta funcionalidade n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>Embora a linguagem internamente possua essa funcionalidade, ela n\u00e3o est\u00e1 dispon\u00edvel para os desenvolvedores.  </p> <p>Uma alternativa \u00e9 utilizar o pacote go-internal que disponibiliza alguns pacotes internos para o nosso uso.</p>"},{"location":"how_to_work_with_x/file_lock/go/#shared-lock","title":"Shared Lock","text":"All ContentStream Content <pre><code>package main\n\nimport (\n    \"github.com/rogpeppe/go-internal/lockedfile\"\n)\n\nfunc main() {\n    content, _ := lockedfile.Read(\"example.txt\")\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"github.com/rogpeppe/go-internal/lockedfile\"\n)\n\nfunc main() {\n    file, _ := lockedfile.Open(\"example.txt\")\n    // ...\n    file.Close()\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/go/#exclusive-lock","title":"Exclusive Lock","text":"All ContentStream Content <pre><code>package main\n\nimport (\n    \"github.com/rogpeppe/go-internal/lockedfile\"\n)\n\nfunc main() {\n    lockedfile.Write(\"example.txt\", []byte(\"Example\"), 0600)\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"github.com/rogpeppe/go-internal/lockedfile\"\n)\n\nfunc main() {\n    file, _ := lockedfile.Edit(\"example.txt\")\n    // ...\n    file.Close()\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/rust/","title":"Go","text":""},{"location":"how_to_work_with_x/file_lock/rust/#shared-lock","title":"Shared Lock","text":"<pre><code>use std::fs::File;\n\nfn main() {\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.lock_shared();\n    file.unlock();\n}\n</code></pre>"},{"location":"how_to_work_with_x/file_lock/rust/#exclusive-lock","title":"Exclusive Lock","text":"<pre><code>use std::fs::File;\n\nfn main() {\n    let mut file = File::open(\"example.txt\").unwrap();\n    file.lock();\n    file.unlock();\n}\n</code></pre>"},{"location":"how_to_work_with_x/log/c/","title":"C","text":"Third Party <p>Est\u00e1 linguagem n\u00e3o inclue uma biblioteca de log oficial.  </p>"},{"location":"how_to_work_with_x/log/c/#syslog","title":"Syslog","text":"<p>Em sistemas operacionais que seguem os padr\u00f5es POSIX, existe uma biblioteca para mandar mensagens ao logger do seus sistema operacional: <code>syslog.h</code>.  </p> <p>Warning</p> <p>Estes logs ficaram misturados com logs de outros programas que usarem est\u00e1 biblioteca.  </p>"},{"location":"how_to_work_with_x/log/c/#file","title":"File","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/syslog.h&gt;\n\nint main() {\n  openlog(NULL, LOG_CONS, LOG_USER);\n  syslog(LOG_INFO, \"Example\");\n  closelog();\n}\n</code></pre> <pre><code>2024-09-22T19:15:03.375012-03:00 username main.out: Example\n</code></pre> <p>Note</p> <p>No Linux, ir\u00e1 adicionar o log a um dos arquivos:  </p> <ul> <li><code>/var/log/syslog</code></li> <li><code>/var/log/messages</code></li> </ul>"},{"location":"how_to_work_with_x/log/c/#stderr","title":"Stderr","text":"<p>Opcionalmente podemos tamb\u00e9m mandar para <code>stderr</code> se utilizarmos <code>LOG_PERROR</code>.  </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/syslog.h&gt;\n\nint main() {\n  openlog(NULL, LOG_PERROR, LOG_USER);\n  syslog(LOG_INFO, \"Example\");\n  closelog();\n}\n</code></pre> <pre><code>main.out: Example\n</code></pre> <p>Note</p> <p>N\u00e3o deixar\u00e1 de loggar em <code>/var/log/syslog</code> ou <code>/var/log/messages</code>.</p>"},{"location":"how_to_work_with_x/log/go/","title":"Go","text":"Official <p>Esta biblioteca \u00e9 mantida pelos criadores oficiais da linguagem.</p>"},{"location":"how_to_work_with_x/log/go/#file","title":"File","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    file, _ := os.OpenFile(\"example.log\", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)\n\n    log.SetOutput(file)\n    log.Print(\"Example\")\n\n    file.Close()\n}\n</code></pre> <pre><code>2024/09/23 04:42:09 Example\n</code></pre>"},{"location":"how_to_work_with_x/log/go/#stderr","title":"Stderr","text":"<pre><code>package main\n\nimport (\n    \"log\"\n)\n\nfunc main() {\n    log.Print(\"Example\")\n}\n</code></pre> <pre><code>2024/09/23 04:42:09 Example\n</code></pre>"},{"location":"how_to_work_with_x/log/python/","title":"Python","text":"Official <p>Esta biblioteca \u00e9 mantida pelos criadores oficiais da linguagem.</p> <p>A biblioteca segue parcialmente o padr\u00e3o syslog.  </p> <p>O comportamento padr\u00e3o da biblioteca \u00e9 ignorar todo log abaixo do level <code>logging.WARNING</code>, por isto adicionamos <code>logging.INFO</code>.  </p>"},{"location":"how_to_work_with_x/log/python/#file","title":"File","text":"<pre><code>import logging\n\nlogging.basicConfig(filename=\"example.log\", level=logging.INFO)\nlogging.info(\"Example\")\n</code></pre> <pre><code>INFO:root:Example\n</code></pre>"},{"location":"how_to_work_with_x/log/python/#stderr","title":"Stderr","text":"<pre><code>import logging\n\nlogging.basicConfig(filename=None, level=logging.INFO)\nlogging.info(\"Example\")\n</code></pre> <pre><code>INFO:root:Example\n</code></pre>"},{"location":"how_to_work_with_x/log/rust/","title":"Rust","text":"Official <p>Esta biblioteca \u00e9 mantida pelos criadores oficiais da linguagem.</p> <p>A biblioteca segue parcialmente o padr\u00e3o syslog.  </p> <p>A biblioteca \u00e9 uma facade, ou seja, apenas provid\u00eancia o front-end do logging. \u00c9 necess\u00e1ria a implementa\u00e7\u00e3o concreta do logger.  </p>"},{"location":"how_to_work_with_x/log/rust/#file","title":"File","text":"<pre><code>use log::{info, Log};\nuse std::{fs::OpenOptions, io::Write};\n\nstruct Logger;\n\nimpl Log for Logger {\n    fn enabled(&amp;self, metadata: &amp;log::Metadata) -&gt; bool {\n        return true;\n    }\n\n    fn log(&amp;self, record: &amp;log::Record) {\n        let msg: String = format!(\"{} - {}\\n\", record.level(), record.args());\n        let mut file = OpenOptions::new()\n            .create(true)\n            .append(true)\n            .open(\"example.log\")\n            .unwrap();\n\n        file.write(msg.as_bytes()).unwrap();\n    }\n\n    fn flush(&amp;self) {\n        //\n    }\n}\n\nfn main() {\n    _ = log::set_logger(&amp;Logger);\n    log::set_max_level(log::LevelFilter::Info);\n    info!(\"Example\");\n}\n</code></pre> <pre><code>INFO - Example\n</code></pre> <p>Note</p> <p>Est\u00e1 implementa\u00e7\u00e3o n\u00e3o \u00e9 recomendada pois ir\u00e1 abrir o arquivo sempre que for escrever. Uma recomenda\u00e7\u00e3o seria abrir apenas uma vez e sempre ir adicionando texto ao arquivo.  </p>"},{"location":"how_to_work_with_x/log/rust/#stderr","title":"Stderr","text":"<pre><code>use log::info;\n\nstruct Logger;\n\nimpl log::Log for Logger {\n    fn enabled(&amp;self, metadata: &amp;log::Metadata) -&gt; bool {\n        return true;\n    }\n\n    fn log(&amp;self, record: &amp;log::Record) {\n        eprintln!(\"{} - {}\", record.level(), record.args());\n    }\n\n    fn flush(&amp;self) {\n        //\n    }\n}\n\nfn main() {\n    _ = log::set_logger(&amp;Logger);\n    log::set_max_level(log::LevelFilter::Info);\n    info!(\"Example\");\n}\n</code></pre> <pre><code>INFO - Example\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/c/","title":"C","text":""},{"location":"how_to_work_with_x/print_scan/c/#print","title":"Print","text":"Formatted <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"%s\\n\", \"example\");\n}\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/c/#scan","title":"Scan","text":"Formatted <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char string[100];\n    scanf(\"%s\", string);\n}\n</code></pre> <p>Note</p> <p>Importante saber que <code>scanf()</code> utiliza caracteres brancos (espa\u00e7o, tab, newline, etc) para determinar o fim do scan de um elemento.  </p> <p>Em outras palavras, se o input para <code>scanf(\"%s\", string)</code> for \"Hello world\", apenas o \"Hello\" ser\u00e1 armazenado em <code>string</code>.</p>"},{"location":"how_to_work_with_x/print_scan/go/","title":"Go","text":""},{"location":"how_to_work_with_x/print_scan/go/#print","title":"Print","text":"FormattedRawIO <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Printf(\"%s\\n\", \"example\")\n}\n</code></pre> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Print(\"example\")\n}\n</code></pre> <pre><code>package main\n\nimport \"os\"\n\nfunc main() {\n    os.Stdout.Write([]byte(\"example\"))\n}\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/go/#scan","title":"Scan","text":"FormattedIO <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var text string\n    fmt.Scanf(\"%s\", &amp;text)\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc main() {\n    text := make([]byte, 10)\n    bufio.NewReader(os.Stdin).Read(text)\n}\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/python/","title":"Python","text":""},{"location":"how_to_work_with_x/print_scan/python/#print","title":"Print","text":"FormattedFormatted 2RawIO <pre><code>print(\"{}\".format(\"example\"))\n</code></pre> <pre><code>string = \"example\"\nprint(f\"{string}\")\n</code></pre> <pre><code>print(\"example\")\n</code></pre> <pre><code>import sys\n\nsys.stdout.write(\"example\")\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/python/#scan","title":"Scan","text":"RawIO <pre><code>string = input()\n</code></pre> <pre><code>import sys\n\nstring = sys.stdin.read(30)\n</code></pre> <p>Warning</p> <p>\ud83d\udc80 Se a quantidade de bytes n\u00e3o for passada para <code>read()</code>, ele ir\u00e1 ler at\u00e9 a mem\u00f3ria da m\u00e1quina esgotar e travar.  </p> <p>Nunca bote sem limite quando se tratando da standard input (pois nunca tem fim).  </p>"},{"location":"how_to_work_with_x/print_scan/rust/","title":"Rust","text":""},{"location":"how_to_work_with_x/print_scan/rust/#print","title":"Print","text":"FormattedIO <pre><code>fn main() {\n    print!(\"{}\\n\", \"example\");\n}\n</code></pre> <pre><code>use std::io::{self, Write};\n\nfn main() {\n    io::stdout().write(\"example\".as_bytes()).unwrap();\n}\n</code></pre>"},{"location":"how_to_work_with_x/print_scan/rust/#scan","title":"Scan","text":"IO <pre><code>use std::io::{self, Read};\n\nfn main() {\n    let mut string: [u8; 30] = [0; 30];\n    io::stdin().read(&amp;mut string).unwrap();\n}\n</code></pre>"},{"location":"how_to_work_with_x/process/c/","title":"C","text":""},{"location":"install/go/","title":"Go","text":"OficialUbuntu <p>Oficialmente n\u00e3o existe um instalador, voc\u00ea selecionaria o bin\u00e1rio correto para o seu OS e seguiria as instru\u00e7\u00f5es:  </p> <p>https://go.dev/doc/install </p> <p>Mantido pelos desenvolvedores do Ubuntu:  </p> <pre><code>sudo apt install golang\n</code></pre> <p>Note</p> <p>Ubuntu armazena o bin\u00e1rio em <code>/usr/bin</code> ent\u00e3o n\u00e3o precisa adicionar no path.  </p>"},{"location":"install/javascript/","title":"JavaScript","text":"<p>Por ser uma linguagem de script originalmente desenvolvida para navegadores, cada navegador implementava seu pr\u00f3prio interpretador para a linguagem (V8 do Chrome, SpiderMonkey do Firefox, WebKit do Safari).  </p> <p>Est\u00e1 parte do c\u00f3digo dos navegadores respons\u00e1vel por executar a linguagem \u00e9 conhecida como JavaScript Engine.  </p> <p>Inicialmente era uma linguagem para ferramentas extenderem funcionalidades aos usu\u00e1rios de maneira pr\u00e1tica. Por\u00e9m com o tempo runtimes foram criados para permiterem a linguagem acessar a m\u00e1quina do usu\u00e1rio da mesma forma que outras faziam, ou seja, deixou de s\u00f3 extender funcionalidades a uma ferramenta e passou a interagir diretamente com a m\u00e1quina do usu\u00e1rio.  </p> <p>Entre estes runtimes, podemos encontrar:</p> <ul> <li>Node.js</li> <li>Deno</li> <li>Bun</li> </ul> <p>A linguagem em si conta que voc\u00ea est\u00e1 executando o c\u00f3digo no navegador mas estes runtimes fornecem bibliotecas para intera\u00e7\u00e3o com o computador.  </p> <p>TLDR: N\u00e3o existe instalador oficial da linguagem. Utilize ela no navegador ou instale um runtime para executa-la localmente.  </p>"},{"location":"install/javascript/#nodejs","title":"Node.js","text":"OficialUbuntu <p>Oficialmente a recomenda\u00e7\u00e3o \u00e9 instalar Node.js pelo version manager da linguagem.  </p> <pre><code>sudo apt install nodejs\n</code></pre>"},{"location":"install/javascript/#deno","title":"Deno","text":"Oficial <pre><code>curl -fsSL https://deno.land/install.sh | sh\n</code></pre>"},{"location":"install/javascript/#bun","title":"Bun","text":"Oficial <pre><code>curl -fsSL https://bun.sh/install | bash\n</code></pre>"},{"location":"install/python/","title":"Python","text":"Ubuntu <p>Incluso no sistema operacional.  </p> <p>Danger</p> <p>N\u00e3o atualize/modifique a vers\u00e3o do Python.  </p> <p>O sistema operacional possui diversos c\u00f3digos internos escritos em Python. Se voc\u00ea modificar a vers\u00e3o do Python e qualquer um desses c\u00f3digos se tornar inv\u00e1lido, voc\u00ea pode quebrar o seu sistema operacional.  </p> <p>Caso queira outras vers\u00f5es de Python, considere utilizar ferramentas como pyenv ou package managers como uv, PDM, Poetry.  </p>"},{"location":"install/rust/","title":"Rust","text":"OficialUbuntu <p>A linha seguinte baixa o script de instala\u00e7\u00e3o e o executa:  </p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>Mantido pelos desenvolvedores do Ubuntu:  </p> <pre><code>sudo apt install rust-all\n</code></pre>"},{"location":"project_management/","title":"Index","text":""},{"location":"project_management/#layout","title":"Layout","text":"<p>Se\u00e7\u00e3o que fala como organizar o diret\u00f3rio de um projeto daquela linguagem.  </p>"},{"location":"project_management/layout/go/","title":"Go","text":"Imposed <p>A linguagem apenas aceita importar c\u00f3digo de arquivos que seguiram a regra da linguagem. Por exemplo:  </p> <p>\"Apenas arquivos no mesmo diret\u00f3rio\" \"Apenas arquivos em subdiret\u00f3rios\" \"Apenas em diret\u00f3rios que tenham o arquivo `.package\"  </p>"},{"location":"project_management/layout/go/#package","title":"Package","text":"<p>Todos os arquivos relacionados ao mesmo pacote devem ficar na mesma pasta e o pacote principal deve ficar na raiz do projeto.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 file0.go\n\u251c\u2500\u2500 file1.go\n\u251c\u2500\u2500 file2.go\n\u2514\u2500\u2500 ...\n</code></pre> <p>Desta forma outros podem importar seu m\u00f3dulo com o URL do reposit\u00f3rio. Por exemplo:  </p> <pre><code>import \"https://www.github.com/username/repository\"\n</code></pre>"},{"location":"project_management/layout/go/#subpackages","title":"Subpackages","text":"<p>\u00c9 normal dividir um projeto grande em subdiret\u00f3rios. Nesse caso, cada subdiret\u00f3rio \u00e9 considerado um subpacote.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 file0.go\n\u251c\u2500\u2500 file1.go\n\u251c\u2500\u2500 file2.go\n\u251c\u2500\u2500 ...\n\u251c\u2500\u2500 subpackage0/\n\u2502   \u251c\u2500\u2500 file3.go\n\u2502   \u251c\u2500\u2500 file4.go\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 subpackage1/\n    \u251c\u2500\u2500 file5.go\n    \u251c\u2500\u2500 file6.go\n    \u2514\u2500\u2500 ...\n</code></pre> <p>Exemplo de como importar c\u00f3digo de subpacotes:  </p> <pre><code>import (\n    \"https://www.github.com/username/repository/subpackage0\"\n    \"https://www.github.com/username/repository/subpackage1\"\n)\n</code></pre> <p>O arquivo <code>go.mod</code> apenas existe no pacote principal pois ele define o in\u00edcio de um m\u00f3dulo (um conjunto de pacotes que existem para se complementar).  </p> <p>Note</p> <p>Utilizando est\u00e1 l\u00f3gica \u00e9 poss\u00edvel diminuir a quantidade de arquivos na raiz do seu projeto. Por exemplo, deixando apenas o arquivo <code>main.go</code> na raiz:  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 cmd/\n    \u251c\u2500\u2500 file0.go\n    \u251c\u2500\u2500 file1.go\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"project_management/layout/go/#private","title":"Private","text":"<p>Diret\u00f3rio <code>internal</code> \u00e9 especial pois a linguagem n\u00e3o permite que outros m\u00f3dulos importem dele.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 file0.go          # Can be imported \u2714\ufe0f\n\u251c\u2500\u2500 subpackage0/      # Can be imported \u2714\ufe0f\n\u2502   \u2514\u2500\u2500 file0.go      # Can be imported \u2714\ufe0f\n\u2514\u2500\u2500 internal/\n    \u251c\u2500\u2500 file1.go      # Cannot be imported \u274c\n    \u2514\u2500\u2500 subpackage1/  # Cannot be imported \u274c\n        \u2514\u2500\u2500 file2.go  # Cannot be imported \u274c\n</code></pre> <p>Ele \u00e9 utilizado para armazenar c\u00f3digo o qual o usu\u00e1rio n\u00e3o deve interagir.  </p>"},{"location":"project_management/layout/python/","title":"Python","text":"Not Imposed <p>A linguagem deixa importar c\u00f3digo de arquivos sem ligar para a localiza\u00e7\u00e3o deles. Por exemplo:</p> <pre><code>import code\nimport dir/code\nimport dir/dir/code\nimport ../code\n</code></pre>"},{"location":"project_management/layout/python/#src-layout","title":"src layout","text":"<p>Os c\u00f3digos do seu projeto deve ficar dentro de um diret\u00f3rio reservado para o pacote/projeto, que por sua vez deve ficar dentro do diret\u00f3rio <code>src</code>.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_package/\n\u2502       \u251c\u2500\u2500 file0.py\n\u2502       \u251c\u2500\u2500 file1.py\n\u2502       \u251c\u2500\u2500 file2.py\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test0.py\n    \u251c\u2500\u2500 test1.py\n    \u2514\u2500\u2500 ...\n</code></pre> <p>Em outras palavras, se voc\u00ea fosse escrever o primeiro arquivo do seu projeto e o nome do arquivo fosse <code>main.py</code>, ele deveria ser escrito em:  </p> <pre><code>src/&lt;package_name&gt;/main.py\n</code></pre> <p>E no momento de distribuir, todos os pacotes dentro de <code>src</code> seriam importaveis pelo programador.  </p> <pre><code>import my_package\n</code></pre> <p>Este layout reserva um diret\u00f3rio inteiro apenas para todos os pacotes a serem distribuidos. Embora a norma seja ter um pacote por distribui\u00e7\u00e3o, \u00e9 poss\u00edvel se ter multiplos pacotes:  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 my_package/\n\u2502   \u2502   \u251c\u2500\u2500 file0.py\n\u2502   \u2502   \u251c\u2500\u2500 file1.py\n\u2502   \u2502   \u251c\u2500\u2500 file2.py\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 my_package2/\n\u2502       \u251c\u2500\u2500 file3.py\n\u2502       \u251c\u2500\u2500 file4.py\n\u2502       \u251c\u2500\u2500 file5.py\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test0.py\n    \u251c\u2500\u2500 test1.py\n    \u2514\u2500\u2500 ...\n</code></pre> <p>Isso faria ambos os pacotes my_package e my_package2 serem import\u00e1veis.  </p> <pre><code>import my_package\nimport my_package2\n</code></pre>"},{"location":"project_management/layout/python/#flat-layout","title":"flat layout","text":"<p>Os c\u00f3digos do seu projeto deve ficar dentro de um diret\u00f3rio reservado para o pacote/projeto.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 my_package/\n\u2502   \u251c\u2500\u2500 file0.py\n\u2502   \u251c\u2500\u2500 file1.py\n\u2502   \u251c\u2500\u2500 file2.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test0.py\n    \u251c\u2500\u2500 test1.py\n    \u2514\u2500\u2500 ...\n</code></pre> <p>Em outras palavras, se voc\u00ea fosse escrever o primeiro arquivo do seu projeto e o nome do arquivo fosse <code>main.py</code>, ele deveria ser escrito em:  </p> <pre><code>&lt;package_name&gt;/main.py\n</code></pre> <p>No momento de distribuir a raiz \u00e9 utilizada como refer\u00eancia para onde o pacote se encontra, ent\u00e3o naturalmente iria incluir arquivos como <code>README.md</code>, <code>pyproject.toml</code>, etc.  </p> <p>Nesse caso \u00e9 necess\u00e1rio explicitamente dizer os arquivos ou diret\u00f3rios a serem inclusos na distribui\u00e7\u00e3o (ou exclusos da distribui\u00e7\u00e3o).  </p>"},{"location":"project_management/layout/rust/","title":"Rust","text":"Imposed <p>A linguagem apenas aceita importar c\u00f3digo de arquivos que seguiram a regra da linguagem. Por exemplo:  </p> <p>\"Apenas arquivos no mesmo diret\u00f3rio\" \"Apenas arquivos em subdiret\u00f3rios\" \"Apenas em diret\u00f3rios que tenham o arquivo `.package\"  </p> <p>A conven\u00e7\u00e3o \u00e9 deixar os c\u00f3digos do seu projeto dentro do diret\u00f3rio <code>src</code>, por\u00e9m isto \u00e9 opcional.  </p>"},{"location":"project_management/layout/rust/#modules","title":"Modules","text":"<p>Todos os m\u00f3dulos utilizados pelo arquivo contendo a fun\u00e7\u00e3o <code>main()</code> precisam estar no mesmo level que ele.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 file0.rs\n    \u251c\u2500\u2500 file1.rs\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"project_management/layout/rust/#submodules","title":"Submodules","text":"<p>M\u00f3dulos podem possuir outros m\u00f3dulos, por\u00e9m eles v\u00e3o precisar estar localizados em um diret\u00f3rio com o nome do m\u00f3dulo pai.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 file0.rs\n    \u251c\u2500\u2500 file1.rs\n    \u251c\u2500\u2500 ...\n    \u2514\u2500\u2500 file1/\n        \u251c\u2500\u2500 file2.rs\n        \u251c\u2500\u2500 file3.rs\n        \u2514\u2500\u2500 ...\n</code></pre> <p>Essa l\u00f3gica se extende adiante, ou seja, se o m\u00f3dulo <code>file2</code> possuir m\u00f3dulos, eles precisam estar dentro de um diret\u00f3rio chamado <code>file2</code>.  </p> <pre><code>.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 file0.rs\n    \u251c\u2500\u2500 file1.rs\n    \u251c\u2500\u2500 ...\n    \u2514\u2500\u2500 file1/\n        \u251c\u2500\u2500 file2.rs\n        \u251c\u2500\u2500 file3.rs\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 file2/\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"tools/","title":"Index","text":""},{"location":"tools/#compile","title":"Compile","text":"<p>Se\u00e7\u00e3o que fala sobre compilar/executar o c\u00f3digo da linguagem.  </p> <p>Essa se\u00e7\u00e3o inclui linguagens que compilam, interpretam ou ambos. Normalmente:  </p> <ul> <li>Compilar envolve gerar um execut\u00e1vel para uma determinada arquitetura de m\u00e1quina.  </li> <li>Interpretar envolve ler o c\u00f3digo e ao mesmo tempo executar o c\u00f3digo lido.  </li> </ul> <p>Mas os dois n\u00e3o s\u00e3o excludentes, pois \u00e9 poss\u00edvel compilar parcialmente ou compilar enquanto est\u00e1 lendo o c\u00f3digo.  </p> <p>Ent\u00e3o n\u00e3o se apegue a detalhes, o foco \u00e9 executar a linguagem.  </p> <p>Note</p> <p>Em casos de compila\u00e7\u00e3o, pode ser necess\u00e1rio executar o execut\u00e1vel manualmente. Exemplo:  </p> <pre><code>./main\n</code></pre>"},{"location":"tools/#format","title":"Format","text":"<p>Se\u00e7\u00e3o que fala sobre o formatador da linguagem.  </p> <p>Formatadores alteram o c\u00f3digo para seguir certos padr\u00f5es de escrita, por\u00e9m sem alterar o comportamento quando executado.  </p>"},{"location":"tools/#debug","title":"Debug","text":"<p>Se\u00e7\u00e3o que fala sobre o debugger da linguagem.  </p> <p>Debuggers permitem os programadores acompanharem a execu\u00e7\u00e3o de um c\u00f3digo a fim de an\u00e1lisar ou descobrir erros.  </p> <p>Note</p> <p>Nem todas as linguagens possuem um debugger pr\u00f3prio, algumas recomendam utilizar debuggers j\u00e1 existentes ou criados pela comunidade. Por exemplo, \u00e9 poss\u00edvel usar GDB e LLDB com a linguagem Rust.  </p>"},{"location":"tools/#lsp","title":"LSP","text":"<p>Se\u00e7\u00e3o que fala sobre LSP (languagem server protocol) da linguagem.  </p> <p>Diferente de outros programas como formatador e linter, que s\u00e3o executados ao se ter a necessidade deles, LSP mant\u00e9m um server localmente esperando por c\u00f3digo para se come\u00e7ar uma an\u00e1lise.  </p> <p>O resultado desta an\u00e1lise pode variar de acordo com o LSP, eles podem fornecer funcionalidades como:  </p> <ul> <li>Formatador</li> <li>Autocomplete</li> <li>Avisar que c\u00f3digo est\u00e1 inv\u00e1lido</li> <li>Avisar que vari\u00e1vel/fun\u00e7\u00e3o/m\u00f3dulo nunca \u00e9 chamado</li> <li>Buscar onde uma vari\u00e1vel/fun\u00e7\u00e3o/m\u00f3dulo foi definida</li> <li>...</li> </ul>"},{"location":"tools/#package-manager","title":"Package Manager","text":"<p>Se\u00e7\u00e3o que fala sobre o gerenciador de pacotes da linguagem.  </p> <p>Gerenciadores de pacotes mant\u00e9m uma lista de m\u00f3dulos/pacotes/bibliotecas a serem importados para o seu projeto.  </p> Module, Package, Library <p>Estes 3 termos s\u00e3o utilizados quando estamos falando de c\u00f3digo a ser importado por outros:  </p> <ul> <li>Module: Arquivo contendo c\u00f3digo</li> <li>Package: Conjunto de m\u00f3dulos dentro do mesmo diret\u00f3rio</li> <li>Library: Conjunto de pacotes e m\u00f3dulos</li> </ul>"},{"location":"tools/#version-manager","title":"Version Manager","text":"<p>Se\u00e7\u00e3o que fala sobre gerenciador de vers\u00e3o para a linguagem.  </p> <p>Gerenciadores de vers\u00e3o permitem a altera\u00e7\u00e3o da vers\u00e3o da linguagem dentro da m\u00e1quina do desenvolvedor.  </p> <p>Tip</p> <p>Importante se for preciso trabalhar em m\u00faltiplos projetos que utilizam vers\u00f5es diferente da linguagem.  </p> <p>Por que n\u00e3o utilizar a vers\u00e3o mais recente da linguagem para todos os projetos?</p> <p>Atualiza\u00e7\u00e3o de vers\u00e3o pode trazer diversas altera\u00e7\u00f5es: remo\u00e7\u00e3o de fun\u00e7\u00e3o/biblioteca, altera\u00e7\u00e3o na arquitetura, etc.  </p> <p>Projetos grandes e velhos precisam ter cuidado durante a atualiza\u00e7\u00e3o para que nada tenha quebrado, ent\u00e3o diversos testes s\u00e3o feitos a cada mudan\u00e7a.  </p> <p>Por outro lado, projetos novos utilizando a vers\u00e3o mais recente possuem o risco de n\u00e3o ter instabilidade. Justamente por n\u00e3o terem tido tanto tempo no mercado para bugs serem descobertos.  </p>"},{"location":"tools/compile/go/","title":"Go","text":""},{"location":"tools/compile/go/#compile","title":"Compile","text":"CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel <code>main</code>:  </p> <pre><code>go build main.go\n</code></pre> <p>Compila e executa a sa\u00edda da compila\u00e7\u00e3o:  </p> <pre><code>go run main.go\n</code></pre> <p>Nenhum bin\u00e1rio \u00e9 gerado.  </p>"},{"location":"tools/compile/go/#compile-when-you-have-multiples-files","title":"Compile when you have multiples files","text":"<p>Parecido com C, onde \u00e9 necess\u00e1rio passar os arquivos a serem compilados.  </p> CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel <code>main</code>:  </p> <pre><code>go build main.go file0.go file1.go file2.go\n</code></pre> <p>Compila e executa a sa\u00edda da compila\u00e7\u00e3o:  </p> <pre><code>go run main.go file0.go file1.go file2.go\n</code></pre> <p>Diferente de C, os arquivos a serem compilados (desta maneira) precisam estar no mesmo diret\u00f3rio.  </p> Project Layout<pre><code>.\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 file0.go\n\u2514\u2500\u2500 file1.go\n\u2514\u2500\u2500 file2.go\n</code></pre>"},{"location":"tools/compile/go/#compile-when-you-have-files-in-subdirectories","title":"Compile when you have files in subdirectories","text":"<p>Note</p> <p>Est\u00e1 parte conta que voc\u00ea tenha alguns conhecimentos de assuntos futuros.</p> <p>A linguagem permite referenciar subpacotes do m\u00f3dulo, ou seja, se tratar seu projeto como um m\u00f3dulo ent\u00e3o poder\u00e1 importar c\u00f3digo dos subdiret\u00f3rios.  </p> Project Layout<pre><code>.\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 subpackage0/\n    \u2514\u2500\u2500 file0.go\n</code></pre> main.go<pre><code>import \"my_module/subpackage0\"\n\nfunc main() {\n    subpackage0.FooBar()    // Function from file0.go\n}\n</code></pre> CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel <code>main</code>:  </p> <pre><code>go build main.go\n</code></pre> <p>Compila e executa a sa\u00edda da compila\u00e7\u00e3o:  </p> <pre><code>go run main.go\n</code></pre>"},{"location":"tools/compile/javascript/","title":"JavaScript","text":"Third Party <p>Este compilador n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/compile/javascript/#execute-with-nodejs","title":"Execute with Node.js","text":"Compile &amp; Execute <p>Executa o c\u00f3digo:  </p> <pre><code>node main.js\n</code></pre>"},{"location":"tools/compile/javascript/#execute-with-deno","title":"Execute with Deno","text":"CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel com o nome do diret\u00f3rio: </p> <pre><code>deno compile main.js\n</code></pre> <p>Executa o c\u00f3digo:  </p> <pre><code>deno run main.js\n</code></pre>"},{"location":"tools/compile/javascript/#execute-with-bun","title":"Execute with Bun","text":"CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel <code>main</code>: </p> <pre><code>bun build --compile main.js\n</code></pre> <p>Executa o c\u00f3digo:  </p> <pre><code>bun main.js\n</code></pre>"},{"location":"tools/compile/python/","title":"Python","text":""},{"location":"tools/compile/python/#execute","title":"Execute","text":"Execute <p>Executa o c\u00f3digo:  </p> <pre><code>python main.py\n</code></pre> <p>Dependendo do sistema operacional, talvez precise usar <code>python3</code>:  </p> <pre><code>python3 main.py\n</code></pre>"},{"location":"tools/compile/rust/","title":"Rust","text":""},{"location":"tools/compile/rust/#compile","title":"Compile","text":"Compile <p>Compila para um execut\u00e1vel <code>main</code>:  </p> <pre><code>rustc main.rs\n</code></pre>"},{"location":"tools/compile/rust/#compile-with-package-manager","title":"Compile with package manager","text":"<p>O package manager da linguagem fornece atalhos para compilar e executar, por\u00e9m isto envolve o diret\u00f3rio estar configurado para o package manager.  </p> CompileCompile &amp; Execute <p>Compila para um execut\u00e1vel localizado em <code>target/debug/&lt;project_name&gt;</code>:  </p> <pre><code>cargo build\n</code></pre> <p>Note</p> <p>Compila para <code>target/release/&lt;project_name&gt;</code> se for release.</p> <p>Compila para um execut\u00e1vel localizado em <code>target/debug/&lt;project_name&gt;</code> e o executa:  </p> <pre><code>cargo run\n</code></pre> <p>Note</p> <p>Compila para <code>target/release/&lt;project_name&gt;</code> se for release.</p>"},{"location":"tools/debug/go/","title":"Go","text":"Third Party <p>Este debugger n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o do Delve.  </p>"},{"location":"tools/debug/go/#debug-with-delve","title":"Debug with Delve","text":"<pre><code>dlv\n</code></pre>"},{"location":"tools/debug/javascript/","title":"JavaScript","text":"Third Party <p>Este debugger n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>Essa linguagem foi criada para ser executada no navegador, isto levou a diversos navegadores construiram seus pr\u00f3prios debuggers. Utilizando runtimes podemos linkar com os navegadores para eles debugarem o c\u00f3digo.  </p>"},{"location":"tools/debug/javascript/#debug-with-nodejs","title":"Debug with Node.js","text":"BrowserBuilt-in <pre><code>node --inspect-brk main.js\n</code></pre> <pre><code>node inspect main.js\n</code></pre>"},{"location":"tools/debug/javascript/#debug-with-deno","title":"Debug with Deno","text":"Browser <pre><code>deno run --inspect-brk main.js\n</code></pre>"},{"location":"tools/debug/javascript/#debug-with-bun","title":"Debug with Bun","text":"Browser <pre><code>bun --inspect-brk main.js\n</code></pre>"},{"location":"tools/debug/python/","title":"Python","text":"Official <p>Este debugger \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/debug/python/#debug","title":"Debug","text":"<p>Igual a outras linguagens, \u00e9 poss\u00edvel inciar o debugger pela linha de comando.  </p> <pre><code>python3 -m pdb main.py\n</code></pre> <p>Por\u00e9m o debugger \u00e9 embutido na linguagem, ou seja, voc\u00ea pode explicamente adicionar um breakpoint na linguagem.  </p> <pre><code>print(\"Hello\")\nbreakpoint()\nprint(\"World\")\n\na = 10\nb = 20; breakpoint()\nprint(a+b)\n</code></pre>"},{"location":"tools/debug/rust/","title":"Rust","text":"Third Party <p>Este debugger n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o de GDB e LLDB.  </p> <p>Note</p> <p>Se eu for escrever mais sobre o assunto, irei escrever na parte da linguagem C para evitar repeti\u00e7\u00e3o.</p>"},{"location":"tools/format/go/","title":"Go","text":"Official <p>Este formatador \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/format/go/#format","title":"Format","text":"<pre><code>gofmt\n</code></pre>"},{"location":"tools/format/javascript/","title":"JavaScript","text":"Third Party <p>Este formatador n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>Uma alternativa bem conhecida de formatador \u00e9 Prettier.  </p>"},{"location":"tools/format/javascript/#format-with-deno","title":"Format with Deno","text":"<pre><code>deno fmt\n</code></pre>"},{"location":"tools/format/python/","title":"Python","text":"Third Party <p>Este formatador n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem possui diversas alternativas de formatadores:  </p> <ul> <li>autopep8</li> <li>Black</li> <li>Ruff</li> <li>yapf</li> </ul> <p>Alguns formatadores n\u00e3o incluem ordenar <code>\u00ecmport</code>, nesse caso considere utilizar em conjunto ordenadores de <code>import</code>.  </p> <ul> <li>isort</li> </ul>"},{"location":"tools/format/rust/","title":"Rust","text":"Official <p>Este formatador \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/format/rust/#format","title":"Format","text":"<pre><code>rustfmt\n</code></pre>"},{"location":"tools/format/rust/#format-with-package-manager","title":"Format with package manager","text":"<p>O package manager da linguagem possui atalho para utilizar o <code>rustfmt</code> no projeto, por\u00e9m isto envolve o diret\u00f3rio estar configurado para o package manager.  </p> <pre><code>cargo fmt\n</code></pre>"},{"location":"tools/lsp/go/","title":"Go","text":"Official <p>Este LSP \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/lsp/javascript/","title":"JavaScript","text":""},{"location":"tools/lsp/python/","title":"Python","text":""},{"location":"tools/lsp/rust/","title":"Rust","text":"Official <p>Este LSP \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/","title":"Index","text":""},{"location":"tools/package_manager/#initialize","title":"Initialize","text":"<p>Gerenciadores de pacotes necessitam listar todas as depend\u00eancias do projeto para que seja poss\u00edvel reconstruir o software do zero. Ent\u00e3o \u00e9 normal gerenciadores terem uma etapa para criarem arquivos que seram utilizados durante o gerenciamento.  </p>"},{"location":"tools/package_manager/#add","title":"Add","text":"<p>Adiciona uma nova depend\u00eancia ao projeto.  </p>"},{"location":"tools/package_manager/#remove","title":"Remove","text":"<p>Remove uma depend\u00eancia do projeto.  </p>"},{"location":"tools/package_manager/#import","title":"Import","text":"<p>Importa todas as depend\u00eancias do projeto.  </p>"},{"location":"tools/package_manager/add/go/","title":"Go","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/add/go/#add","title":"Add","text":"<p>Declare o importe do pacote a ser utilizado no seu c\u00f3digo.  </p> <pre><code>import \"&lt;path&gt;\"\n</code></pre> <p>Execute o seguinte comando para que o seu c\u00f3digo seja analisado e as depend\u00eancias necess\u00e1rias sejam adicionadas.  </p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tools/package_manager/add/go/#alternative","title":"Alternative","text":"<p>Adiciona a depend\u00eancia.  </p> <pre><code>go get &lt;path&gt;\n</code></pre>"},{"location":"tools/package_manager/add/python/","title":"Python","text":"Third Party <p>Este gerenciador de pacotes n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o do Pip.  </p>"},{"location":"tools/package_manager/add/python/#add-with-pip","title":"Add with Pip","text":"<pre><code>pip install &lt;package_name&gt;\n</code></pre> <p>Warning</p> <p>Pip n\u00e3o armazena suas depend\u00eancias automaticamentes em um arquivo do seu projeto, ent\u00e3o \u00e9 necess\u00e1rio criar o arquivo de depend\u00eancias manualmente.  </p> <p>O comando <code>pip freeze</code> \u00e9 utilizado para listar as depend\u00eancias instaladas at\u00e9 o momento.  </p> <p>Utilizando o seguinte prompt podemos criar/atualizar o arquivo de depend\u00eancias (normalmente chamado de <code>requirements.txt</code>):  </p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"tools/package_manager/add/python/#add-with-pdm","title":"Add with PDM","text":"<pre><code>pdm add &lt;package_name&gt;\n</code></pre>"},{"location":"tools/package_manager/add/rust/","title":"Rust","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/add/rust/#add","title":"Add","text":"<pre><code>cargo add &lt;package_name&gt;\n</code></pre>"},{"location":"tools/package_manager/import/go/","title":"Go","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/import/go/#import","title":"Import","text":"<pre><code>go get .\n</code></pre>"},{"location":"tools/package_manager/import/python/","title":"Python","text":"Third Party <p>Este gerenciador de pacotes n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o do Pip.  </p>"},{"location":"tools/package_manager/import/python/#import-with-pip","title":"Import with Pip","text":"<pre><code>pip install -r requirements.txt\n</code></pre> <p>Note</p> <p>Pip n\u00e3o obriga que as depend\u00eancias estejam no arquivo <code>requirements.txt</code> mas \u00e9 o local mais comum de se armazenar quando utilizando este gerenciador.</p>"},{"location":"tools/package_manager/import/python/#import-with-pdm","title":"Import with PDM","text":"<pre><code>pdm install\n</code></pre>"},{"location":"tools/package_manager/import/rust/","title":"Rust","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/import/rust/#import","title":"Import","text":"<pre><code>cargo build\n</code></pre>"},{"location":"tools/package_manager/initialize/go/","title":"Go","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/initialize/go/#initialize","title":"Initialize","text":"<pre><code>go mod init &lt;path&gt;\n</code></pre> <p>A linguagem parte do princ\u00edpio que seu pacote ir\u00e1 ser disponibilizado na internet, por isto \u00e9 normal se utilizar o caminho para o reposit\u00f3rio.  </p> <p>Por exemplo: <code>github.com/gofrs/flock</code> leva para o pacote <code>flock</code> do usu\u00e1rio <code>gofrs</code> armazenado em um reposit\u00f3rio do Github.  </p>"},{"location":"tools/package_manager/initialize/python/","title":"Python","text":"Third Party <p>Este gerenciador de pacotes n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o do Pip.  </p>"},{"location":"tools/package_manager/initialize/python/#initialize-with-pip","title":"Initialize with Pip","text":"<p>Pip n\u00e3o provid\u00eancia nenhum comando de inicializa\u00e7\u00e3o.  </p>"},{"location":"tools/package_manager/initialize/python/#initialize-with-pdm","title":"Initialize with PDM","text":"<pre><code>pdm init\n</code></pre>"},{"location":"tools/package_manager/initialize/rust/","title":"Rust","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/initialize/rust/#initialize","title":"Initialize","text":"<p>Caso n\u00e3o tenha criado o diret\u00f3rio do projeto, \u00e9 poss\u00edvel cria-lo e inicializa-lo com o comando:  </p> <pre><code>cargo new &lt;path&gt;\n</code></pre> <p>Caso j\u00e1 tenha um diret\u00f3rio para o projeto, se deve inicializar com o comando:  </p> <pre><code>cargo init\n</code></pre>"},{"location":"tools/package_manager/remove/go/","title":"Go","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/remove/go/#remove","title":"Remove","text":"<p>Remova qualquer importe de um especifico pacote do seu c\u00f3digo.  </p> <p>Execute o seguinte comando para que o seu c\u00f3digo seja analisado e as depend\u00eancias n\u00e3o necess\u00e1rias sejam removidas.  </p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tools/package_manager/remove/go/#alternative","title":"Alternative","text":"<p>Remove a depend\u00eancia.  </p> <pre><code>go get &lt;path&gt;@none\n</code></pre> <p>Normalmente \u00e9 o n\u00famero da vers\u00e3o que se deve botar ap\u00f3s o <code>@</code>, por\u00e9m ao botar <code>none</code> o comando entende que \u00e9 para remover o pacote.  </p>"},{"location":"tools/package_manager/remove/python/","title":"Python","text":"Third Party <p>Este gerenciador de pacotes n\u00e3o \u00e9 mantido pelos criadores oficiais da linguagem.</p> <p>A linguagem recomenda a utiliza\u00e7\u00e3o do Pip.  </p>"},{"location":"tools/package_manager/remove/python/#remove-with-pip","title":"Remove with Pip","text":"<pre><code>pip uninstall &lt;package_name&gt;\n</code></pre>"},{"location":"tools/package_manager/remove/python/#remove-with-pdm","title":"Remove with PDM","text":"<pre><code>pdm remove &lt;package_name&gt;\n</code></pre>"},{"location":"tools/package_manager/remove/rust/","title":"Rust","text":"Official <p>Este gerenciador de pacotes \u00e9 mantido pelos criadores oficiais da linguagem.</p>"},{"location":"tools/package_manager/remove/rust/#remove","title":"Remove","text":"<pre><code>cargo remove &lt;package_name&gt;\n</code></pre>"}]}